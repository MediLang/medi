{
  "tasks": [
    {
      "id": 1,
      "title": "Implement Streaming Lexer",
      "status": "pending",
      "dependencies": [],
      "description": "Modify the lexer to process input in chunks rather than loading everything into memory at once.",
      "details": {
        "acceptance_criteria": [
          "Process input in configurable chunk sizes (default 8KB)",
          "Maintain position tracking across chunk boundaries",
          "Handle token boundaries that span chunks",
          "Add benchmarks comparing memory usage before/after"
        ],
        "complexity": "High"
      },
      "tags": ["memory", "lexer", "performance"]
    },
    {
      "id": 2,
      "title": "Optimize Token Storage",
      "status": "pending",
      "dependencies": [1],
      "description": "Implement more memory-efficient token storage using techniques like SmallVec or packed structs.",
      "details": {
        "acceptance_criteria": [
          "Reduce Token struct size by using smaller integer types where possible",
          "Consider bit-packing for token types and flags",
          "Implement arena allocation for tokens",
          "Add memory usage benchmarks"
        ],
        "complexity": "Medium"
      },
      "tags": ["memory", "tokens", "performance"]
    },
    {
      "id": 3,
      "title": "Optimize AST Representation",
      "status": "pending",
      "dependencies": [2],
      "description": "Reduce memory usage of AST nodes through better data layout and allocation strategies.",
      "details": {
        "acceptance_criteria": [
          "Use Box<[T]> instead of Vec<T> for children where possible",
          "Implement arena allocation for AST nodes",
          "Consider using typed-arena or bumpalo for allocation",
          "Add memory profiling to track improvements"
        ],
        "complexity": "High"
      },
      "tags": ["memory", "ast", "performance"]
    },
    {
      "id": 4,
      "title": "Improve Error Reporting Memory Efficiency",
      "status": "pending",
      "dependencies": [],
      "description": "Modify error reporting to avoid storing entire source lines in memory.",
      "details": {
        "acceptance_criteria": [
          "Store line/column offsets instead of full line contents",
          "Implement line lookup from original source when needed",
          "Add source context generation on demand",
          "Ensure no regression in error message quality"
        ],
        "complexity": "Medium"
      },
      "tags": ["memory", "errors", "diagnostics"]
    },
    {
      "id": 5,
      "title": "Add Memory Benchmarking",
      "status": "pending",
      "dependencies": [1, 2, 3, 4],
      "description": "Implement comprehensive memory benchmarking to measure improvements.",
      "details": {
        "acceptance_criteria": [
          "Add memory usage tracking for different compiler stages",
          "Create benchmark suite for large files (1MB, 10MB, 100MB)",
          "Track peak memory usage and total allocations",
          "Generate comparison reports between versions"
        ],
        "complexity": "Low"
      },
      "tags": ["benchmarking", "performance", "memory"]
    }
  ]
}
