name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fmt-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2
      - name: Install LLVM 15
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM environment variables
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
      - name: Install nightly for rustfmt (if needed)
        run: rustup component add rustfmt
      - name: Rustfmt check
        run: cargo fmt --all -- --check
      - name: Clippy check
        run: RUST_BACKTRACE=1 cargo clippy --all -- -A warnings

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2

      # Linux: install LLVM 15 and clang-15
      - name: Install LLVM 15 (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM env (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      # macOS: install LLVM 15 via Homebrew
      - name: Install LLVM 15 (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm@15
          echo "LLVM_SYS_150_PREFIX=$(brew --prefix llvm@15)" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix llvm@15)/bin:$PATH" >> $GITHUB_ENV
      - name: Set LLVM env (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "LIBCLANG_PATH=$(xcrun --show-sdk-path)/usr/lib" >> $GITHUB_ENV
      - name: Set target triple (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "$(uname -m)" = "arm64" ]; then
            echo "MEDI_TARGET_TRIPLE=aarch64-apple-darwin" >> $GITHUB_ENV
          else
            echo "MEDI_TARGET_TRIPLE=x86_64-apple-darwin" >> $GITHUB_ENV
          fi

      # Windows: install LLVM 15 using install-llvm-action (reliable headers/libs)
      - name: Install LLVM 15 (Windows)
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "15.0"
      - name: Set LLVM env (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "LLVM_PATH (from action) = $env:LLVM_PATH"
          echo "LLVM_SYS_150_PREFIX=$env:LLVM_PATH" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=$env:LLVM_PATH\\bin" >> $env:GITHUB_ENV
          echo "LLVM_HOME=$env:LLVM_PATH" >> $env:GITHUB_ENV
          echo "LIB=$env:LLVM_PATH\\lib;$env:LIB" >> $env:GITHUB_ENV
          if (Test-Path "$env:LLVM_PATH\\bin\\llvm-config.exe") {
            echo "LLVM_CONFIG_PATH=$env:LLVM_PATH\\bin\\llvm-config.exe" >> $env:GITHUB_ENV
          }
          echo "PATH=$env:LLVM_PATH\\bin;$env:PATH" >> $env:GITHUB_ENV
        shell: powershell

      - name: Verify LLVM on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "LLVM_SYS_150_PREFIX=$env:LLVM_SYS_150_PREFIX"
          Write-Host "LIBCLANG_PATH=$env:LIBCLANG_PATH"
          Write-Host "Listing LLVM bin directory contents:"
          Get-ChildItem "$env:LLVM_SYS_150_PREFIX\\bin" | Select-Object Name
          Write-Host "Checking for expected directories:"
          Test-Path "$env:LLVM_SYS_150_PREFIX\\include" | ForEach-Object { Write-Host "include exists: $_" }
          Test-Path "$env:LLVM_SYS_150_PREFIX\\lib" | ForEach-Object { Write-Host "lib exists: $_" }

      # Windows: llvmenv fallback to ensure LLVM 15 is available where llvm-sys expects
      - name: Install llvmenv (Windows fallback)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cargo install llvmenv --locked
          llvmenv --help

      - name: Cache llvmenv toolchains
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.USERPROFILE }}\.llvmenv
            ${{ env.USERPROFILE }}\.cargo\bin\llvmenv.exe
          key: windows-llvmenv-llvm15
          restore-keys: |
            windows-llvmenv-

      - name: Build/Activate LLVM 15 via llvmenv (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $Version = "15.0.7-msvc"
          llvmenv list-remote | Select-String -Pattern '15' | ForEach-Object { $_.ToString() }
          if (-not (llvmenv list | Select-String $Version)) {
            llvmenv build $Version
          }
          llvmenv global $Version
          $Prefix = llvmenv prefix
          Write-Host "llvmenv prefix: $Prefix"
          echo "LLVM_SYS_150_PREFIX=$Prefix" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=$Prefix\\bin" >> $env:GITHUB_ENV
          echo "PATH=$Prefix\\bin;$env:PATH" >> $env:GITHUB_ENV
          echo "INKWELL_LLVM_VERSION=15" >> $env:GITHUB_ENV
          echo "LLVM_SYS_150_IGNORE_MARKER=YES" >> $env:GITHUB_ENV

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        env:
          LLVM_SYS_150_PREFIX: ${{ env.LLVM_SYS_150_PREFIX }}
          LIBCLANG_PATH: ${{ env.LIBCLANG_PATH }}
          PATH: ${{ env.PATH }}
          INKWELL_LLVM_VERSION: "15"
          LLVM_SYS_150_IGNORE_MARKER: "YES"
          LLVM_HOME: ${{ env.LLVM_HOME }}
          LIB: ${{ env.LIB }}
        run: |
          echo Running subset of tests on Windows to avoid LLVM-dependent crates
          cargo test -p medic_ast -p medic_parser -p medic_type -p medic_typeck --all-features

      - name: Run tests (non-Windows)
        if: runner.os != 'Windows'
        run: cargo test --workspace

  bench-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2
      - name: Install LLVM 15
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM environment variables
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
      - name: Run codegen benchmark (smoke)
        env:
          MEDI_BENCH_SMOKE: "1"
        run: |
          cargo bench -p medic_benchmarks --bench codegen_bench -- --quick

  codegen-matrix:
    name: Codegen Artifacts (LLVM)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, wasm32, riscv32]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2
      - name: Install LLVM 15
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM environment variables
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "INKWELL_LLVM_VERSION=15" >> $GITHUB_ENV
          echo "LLVM_SYS_150_IGNORE_MARKER=YES" >> $GITHUB_ENV
      - name: Build workspace
        run: cargo build --workspace --features llvm-backend
      - name: Emit object for ${{ matrix.target }}
        run: |
          mkdir -p artifacts
          cargo run -p medic --features llvm-backend -- --emit=${{ matrix.target }} --opt=2 --out=artifacts/${{ matrix.target }}.o << 'EOF'
          // minimal program to drive codegen
          fn main() { }
          EOF
      - name: Upload codegen artifact
        uses: actions/upload-artifact@v4
        with:
          name: obj-${{ matrix.target }}
          path: artifacts/${{ matrix.target }}.o
