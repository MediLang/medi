name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fmt-and-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2
      - name: Install LLVM 15
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM environment variables
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
      - name: Install nightly for rustfmt (if needed)
        run: rustup component add rustfmt
      - name: Rustfmt check
        run: cargo fmt --all -- --check
      - name: Clippy check
        run: RUST_BACKTRACE=1 cargo clippy --all -- -A warnings

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2

      # Linux: install LLVM 15 and clang-15
      - name: Install LLVM 15 (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM env (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      # macOS: install LLVM 15 via Homebrew
      - name: Install LLVM 15 (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm@15
          echo "LLVM_SYS_150_PREFIX=$(brew --prefix llvm@15)" >> $GITHUB_ENV
          echo "PATH=$(brew --prefix llvm@15)/bin:$PATH" >> $GITHUB_ENV
      - name: Set LLVM env (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "LIBCLANG_PATH=$(xcrun --show-sdk-path)/usr/lib" >> $GITHUB_ENV
      - name: Set target triple (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "$(uname -m)" = "arm64" ]; then
            echo "MEDI_TARGET_TRIPLE=aarch64-apple-darwin" >> $GITHUB_ENV
          else
            echo "MEDI_TARGET_TRIPLE=x86_64-apple-darwin" >> $GITHUB_ENV
          fi

      # Windows: install LLVM via Chocolatey
      - name: Install LLVM 15 (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco list --local-only | Select-String -Pattern '^llvm ' | ForEach-Object { $_.ToString() }
          $installed = choco list --local-only | Select-String -Pattern '^llvm ' | ForEach-Object { $_.ToString() }
          if ($installed -and ($installed -notmatch '15\.')) {
            Write-Host "Found non-15 LLVM installed. Uninstalling..."
            choco uninstall -y llvm
          }
          Write-Host "Installing LLVM 15.0.7 via Chocolatey..."
          choco install -y llvm --version=15.0.7 --allow-downgrade --force
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install LLVM 15.0.7"
            exit 1
          }
      - name: Set LLVM env (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "LLVM_SYS_150_PREFIX=C:\\Program Files\\LLVM" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=C:\\Program Files\\LLVM\\bin" >> $env:GITHUB_ENV
          if (Test-Path "C:\\Program Files\\LLVM\\bin\\llvm-config.exe") {
            echo "LLVM_CONFIG_PATH=C:\\Program Files\\LLVM\\bin\\llvm-config.exe" >> $env:GITHUB_ENV
          }
          echo "PATH=C:\\Program Files\\LLVM\\bin;$env:PATH" >> $env:GITHUB_ENV
        shell: powershell

      - name: Verify LLVM on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "LLVM_SYS_150_PREFIX=$env:LLVM_SYS_150_PREFIX"
          Write-Host "LIBCLANG_PATH=$env:LIBCLANG_PATH"
          if ($env:LLVM_CONFIG_PATH) {
            Write-Host "LLVM_CONFIG_PATH=$env:LLVM_CONFIG_PATH"
          } else {
            Write-Host "LLVM_CONFIG_PATH not set (llvm-config.exe typically not shipped on Windows)."
          }
          Write-Host "Listing LLVM bin directory contents:"
          Get-ChildItem "C:\\Program Files\\LLVM\\bin" | Select-Object Name
          Write-Host "Checking for expected directories:"
          Test-Path "C:\\Program Files\\LLVM\\include" | ForEach-Object { Write-Host "include exists: $_" }
          Test-Path "C:\\Program Files\\LLVM\\lib" | ForEach-Object { Write-Host "lib exists: $_" }

      - name: Run tests
        run: cargo test --workspace

  bench-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo registry and build
        uses: Swatinem/rust-cache@v2
      - name: Install LLVM 15
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libllvm15 llvm-15-runtime clang-15 libpolly-15-dev
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Set LLVM environment variables
        run: |
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
      - name: Run codegen benchmark (smoke)
        env:
          MEDI_BENCH_SMOKE: "1"
        run: |
          cargo bench -p medic_benchmarks --bench codegen_bench -- --quick
