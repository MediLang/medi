{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"The Medi Book <p> Website |    Repository |    Contributing |    Glossary </p> <p> </p> <p>Medi is a programming language purpose-built for healthcare, designed to transform medical analytics with unparalleled ease, speed, and security. With a beginner-friendly syntax inspired by Python and R, high performance rivaling Julia, Rust, and C++, and native support for healthcare standards like FHIR, HL7, and DICOM, Medi empowers clinicians, researchers, and developers to unlock insights from complex medical data. New to healthcare informatics? Check out our comprehensive glossary of healthcare and bioinformatics terms.</p>"},{"location":"#why-medi","title":"Why Medi?","text":"<p>Healthcare demands tools that balance accessibility, performance, security, and compliance. Existing languages fall short:</p> <ul> <li>Python/R: Versatile but slow for big data, lack native healthcare standards, and require complex integrations.</li> <li>SAS/Stata: Expensive, proprietary, and cumbersome for modern workflows.</li> <li>Julia: Fast but not healthcare-specific, with a smaller ecosystem.</li> </ul> <p>Medi fills these gaps with a language tailored for healthcare, offering:</p> <ul> <li>Native Healthcare Standards: Built-in support for FHIR, HL7, DICOM, and genomic formats (FASTQ, VCF).</li> <li>Privacy-Preserving Analytics: Federated learning and differential privacy for secure data science and AI.</li> <li>Real-Time IoT Processing: Optimized for wearables and ICU devices, enabling instant insights.</li> <li>Regulatory Automation: Automated compliance checks and reporting for HIPAA, GDPR, FDA, and EMA.</li> <li>Clinician-Friendly Syntax: Intuitive, Python/R-like syntax and a visual IDE for non-programmers.</li> <li>High Performance: Compiled to machine code via LLVM, with WebAssembly and RISC-V support for edge devices.</li> <li>Versatile Applications: Genomics, clinical trials, epidemiology, hospital analytics, telemedicine, imaging, R&amp;D, and more.</li> <li>Rust-Inspired Design: Clean, modern syntax with explicit visibility modifiers (<code>pub</code>), module system, and pattern matching.</li> </ul>"},{"location":"#status","title":"Status","text":"<p>Medi is currently in pre-alpha stage. The core language features and standard library are under active development.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation</li> <li>Basic Syntax</li> <li>First Medi Program</li> <li>Example Scripts</li> </ul>"},{"location":"glossary/","title":"MediLang Glossary","text":"<p>This glossary provides explanations of healthcare and bioinformatics-related terms that developers might encounter while working with MediLang. Each section includes relevant resources, citations, and practical examples for better understanding.</p>"},{"location":"glossary/#healthcare-data-standards","title":"Healthcare Data Standards","text":""},{"location":"glossary/#fhir-fast-healthcare-interoperability-resources","title":"FHIR (Fast Healthcare Interoperability Resources)","text":"<p>A modern standard for exchanging healthcare information electronically. FHIR combines the best features of HL7's v2, v3, and CDA while leveraging current web technologies.</p> <p>Key Features: - RESTful API architecture - JSON, XML, and RDF formats - Modular components called \"Resources\" - Human-readable base schemas - Strong focus on implementability</p> <p>Example FHIR Resource (Patient in JSON): <pre><code>{\n  \"resourceType\": \"Patient\",\n  \"id\": \"example\",\n  \"active\": true,\n  \"name\": [{\n    \"use\": \"official\",\n    \"family\": \"Smith\",\n    \"given\": [\"John\", \"Edward\"]\n  }],\n  \"gender\": \"male\",\n  \"birthDate\": \"1974-12-25\",\n  \"address\": [{\n    \"use\": \"home\",\n    \"line\": [\"123 Healthcare Street\"],\n    \"city\": \"Ann Arbor\",\n    \"state\": \"MI\",\n    \"postalCode\": \"48105\"\n  }]\n}\n</code></pre></p> <p>Example FHIR API Endpoints: <pre><code>GET  /Patient/[id]           # Get specific patient\nPOST /Patient               # Create new patient\nGET  /Patient?name=Smith    # Search patients by name\nGET  /Observation?patient=[id] # Get patient's observations\n</code></pre></p> <p>Resources: - Official FHIR Documentation - FHIR for Developers - SMART on FHIR</p>"},{"location":"glossary/#hl7-health-level-seven","title":"HL7 (Health Level Seven)","text":"<p>The global authority on standards for interoperability of health technology, producing healthcare data exchange and information modeling standards.</p> <p>Versions: - HL7 v2.x: Legacy message-based standard using pipe-delimited syntax</p> <p>Example HL7 v2 Message (ADT-A01 Patient Admission): <pre><code>MSH|^~\\&amp;|SENDING_APP|SENDING_FAC|RECEIVING_APP|RECEIVING_FAC|20230401123045||ADT^A01|MSG00001|P|2.3\nEVN|A01|20230401123045\nPID|1||12345^^^MRN||SMITH^JOHN^E||19741225|M|||123 HEALTHCARE ST^^ANN ARBOR^MI^48105\nNK1|1|SMITH^JANE^|SPOUSE|734-555-0123\nPV1|1|I|2000^2012^01||||0123^WATSON^ROBERT|||||||||V|||||||||||||||||||||||||20230401123045\n</code></pre></p> <p>Example HL7 v3 Message (Same admission in XML): <pre><code>&lt;ADT_A01 xmlns=\"urn:hl7-org:v3\"&gt;\n  &lt;id root=\"2.16.840.1.113883.19.3.2409\" extension=\"MSG00001\"/&gt;\n  &lt;creationTime value=\"20230401123045\"/&gt;\n  &lt;patient&gt;\n    &lt;name&gt;\n      &lt;given&gt;John&lt;/given&gt;\n      &lt;family&gt;Smith&lt;/family&gt;\n    &lt;/name&gt;\n    &lt;administrativeGenderCode code=\"M\"/&gt;\n    &lt;birthTime value=\"19741225\"/&gt;\n  &lt;/patient&gt;\n&lt;/ADT_A01&gt;\n</code></pre> - HL7 v3: XML-based standard with Reference Information Model (RIM) - CDA: Clinical Document Architecture for clinical documents</p> <p>Resources: - HL7 Standards - HL7 v2 to FHIR</p>"},{"location":"glossary/#genomics-file-formats","title":"Genomics File Formats","text":""},{"location":"glossary/#fastq","title":"FASTQ","text":"<p>A text format that stores both biological sequences and their quality scores. Essential in modern high-throughput sequencing workflows.</p> <p>Format Structure: <pre><code>@SEQ_ID                 # Sequence identifier\nGATTTGGGGTTCAAAGCAG    # Raw sequence\n+                      # Separator line\n!''*((((***+))%%%++   # Quality scores (ASCII-encoded)\n</code></pre></p> <p>Example FASTQ Entry (Illumina Format): <pre><code>@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36\nGATTACGAATGCTAGGTCGGATCTGAGGCAATGTG\n+\n!''*(((((***+))%%%++)(%%%%).1***-+*''\n</code></pre></p> <p>Quality Score Interpretation: <pre><code># Phred+33 encoding (Illumina 1.8+)\ndef qual_to_prob(ascii_char):\n    \"\"\"Convert ASCII quality char to error probability\"\"\"\n    phred = ord(ascii_char) - 33\n    error_prob = 10 ** (-phred/10)\n    return error_prob\n\n# Example\nprint(qual_to_prob('!'))  # Lowest quality (Q=0)\nprint(qual_to_prob('I'))  # High quality (Q=40)\n</code></pre></p> <p>Resources: - FASTQ Format Specification - Quality Score Encoding</p>"},{"location":"glossary/#vcf-variant-call-format","title":"VCF (Variant Call Format)","text":"<p>The standard format for storing DNA sequence variations. Critical for genomic medicine and population genetics studies.</p> <p>Example VCF File: <pre><code>##fileformat=VCFv4.3\n##reference=GRCh38\n##INFO=&lt;ID=AF,Number=A,Type=Float,Description=\"Allele Frequency\"&gt;\n##FORMAT=&lt;ID=GT,Number=1,Type=String,Description=\"Genotype\"&gt;\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  SAMPLE1 SAMPLE2\n20      14370   rs6054257    G       A       29      PASS    AF=0.5  GT      0/1     1/1\n20      17330   .           T       A       3       q10     AF=0.017 GT      0/0     0/1\n</code></pre></p> <p>Common Operations with VCF: <pre><code># Filter variants by quality using bcftools\nbcftools filter -i 'QUAL&gt;20' input.vcf &gt; high_quality.vcf\n\n# Extract SNPs only\nbcftools view -v snps input.vcf &gt; snps_only.vcf\n\n# Calculate allele frequencies\nbcftools +fill-tags input.vcf -- -t AF\n</code></pre></p> <p>Resources: - VCF 4.3 Specification - VCF Guide by GATK</p>"},{"location":"glossary/#bamsam","title":"BAM/SAM","text":"<p>Formats for storing sequence alignments against reference sequences.</p> <p>Example SAM File: <pre><code>@HD     VN:1.6  SO:coordinate\n@SQ     SN:chr1 LN:248956422\n@RG     ID:S1   SM:sample1    LB:lib1     PL:ILLUMINA\nread1   99      chr1    45646  60      76M     =       45867   221     AGCTGCAGTCAGTTCTGTACACC    BBBBBBBBBBBBBBBBBBBBBBB    NM:i:0  AS:i:76\nread2   147     chr1    45867  60      76M     =       45646   -221    TGCACCTGTACAGAACTGACTGCA    BBBBBBBBBBBBBBBBBBBBBBB    NM:i:0  AS:i:76\n</code></pre></p> <p>Common SAM/BAM Operations: <pre><code># Convert SAM to BAM\nsamtools view -b input.sam &gt; output.bam\n\n# Sort BAM file\nsamtools sort input.bam -o sorted.bam\n\n# Index BAM file\nsamtools index sorted.bam\n\n# View alignment statistics\nsamtools flagstat sorted.bam\n</code></pre></p> <p>Example Python Code (using pysam): <pre><code>import pysam\n\n# Open BAM file\nbam = pysam.AlignmentFile(\"sorted.bam\", \"rb\")\n\n# Count reads in a region\nregion_reads = bam.count(\"chr1\", 100000, 200000)\n\n# Get read names in region\nfor read in bam.fetch(\"chr1\", 100000, 200000):\n    print(read.query_name, read.reference_start)\n</code></pre></p> <p>Resources: - SAM/BAM Specifications - Samtools Documentation - Pysam Documentation</p>"},{"location":"glossary/#computational-biology-terms","title":"Computational Biology Terms","text":""},{"location":"glossary/#ngs-next-generation-sequencing","title":"NGS (Next Generation Sequencing)","text":"<p>Modern high-throughput DNA sequencing technologies that revolutionized genomics research.</p> <p>Key Technologies: - Illumina (Short-read sequencing) - PacBio (Long-read sequencing) - Oxford Nanopore (Long-read, real-time sequencing) - 10x Genomics (Linked-read sequencing)</p> <p>Example Workflow: <pre><code>graph TD\n    A[Sample Collection] --&gt; B[DNA Extraction]\n    B --&gt; C[Library Preparation]\n    C --&gt; D[Sequencing]\n    D --&gt; E[Base Calling]\n    E --&gt; F[Quality Control]\n    F --&gt; G[Data Analysis]\n</code></pre></p> <p>Example Quality Metrics: <pre><code># Common NGS QC metrics\nclass NGSMetrics:\n    def __init__(self, total_reads, mapped_reads, q30_bases):\n        self.total_reads = total_reads\n        self.mapped_reads = mapped_reads\n        self.q30_bases = q30_bases\n\n    @property\n    def mapping_rate(self):\n        return self.mapped_reads / self.total_reads * 100\n\n    @property\n    def q30_rate(self):\n        return self.q30_bases / (self.total_reads * 150) * 100  # assuming 150bp reads\n</code></pre></p> <p>Resources: - Nature Review: NGS Technologies - Illumina Sequencing Methods</p>"},{"location":"glossary/#bioinformatics-pipeline","title":"Bioinformatics Pipeline","text":"<p>A series of computational steps for processing biological data, typically implemented as workflows.</p> <p>Example Nextflow Pipeline: <pre><code>// Basic RNA-seq pipeline\nnextflow.enable.dsl=2\n\nprocess FASTQC {\n    input:\n        tuple val(sample_id), path(reads)\n    output:\n        path \"fastqc_${sample_id}_logs\"\n\n    script:\n    \"\"\"\n    fastqc -o fastqc_${sample_id}_logs ${reads}\n    \"\"\"\n}\n\nprocess ALIGN {\n    input:\n        tuple val(sample_id), path(reads)\n        path index\n    output:\n        tuple val(sample_id), path(\"${sample_id}.bam\")\n\n    script:\n    \"\"\"\n    STAR --genomeDir $index \\\n         --readFilesIn ${reads} \\\n         --outFileNamePrefix ${sample_id}. \\\n         --runThreadN ${task.cpus}\n    \"\"\"\n}\n</code></pre></p> <p>Example Snakemake Rule: <pre><code># Rule for variant calling\nrule call_variants:\n    input:\n        bam=\"mapped/{sample}.bam\",\n        ref=\"reference/genome.fa\"\n    output:\n        vcf=\"variants/{sample}.vcf\"\n    conda:\n        \"envs/gatk.yaml\"\n    shell:\n        \"\"\"gatk HaplotypeCaller \\\n           -R {input.ref} \\\n           -I {input.bam} \\\n           -O {output.vcf}\"\"\"\n</code></pre></p> <p>Resources: - Nextflow Documentation - nf-core: Curated Pipelines - Snakemake Documentation</p>"},{"location":"glossary/#clinical-terms","title":"Clinical Terms","text":""},{"location":"glossary/#ehremr-systems","title":"EHR/EMR Systems","text":"<p>Digital systems for managing patient health information.</p> <p>Example EHR Data Structure: <pre><code>{\n  \"patient\": {\n    \"demographics\": {\n      \"id\": \"12345\",\n      \"name\": {\n        \"first\": \"John\",\n        \"last\": \"Smith\"\n      },\n      \"dob\": \"1974-12-25\",\n      \"gender\": \"M\"\n    },\n    \"encounters\": [{\n      \"date\": \"2023-03-15\",\n      \"type\": \"office_visit\",\n      \"provider\": \"Dr. Jane Wilson\",\n      \"diagnosis\": [{\n        \"code\": \"E11.9\",\n        \"system\": \"ICD-10\",\n        \"description\": \"Type 2 diabetes without complications\"\n      }],\n      \"vitals\": {\n        \"blood_pressure\": \"120/80\",\n        \"temperature\": \"98.6\",\n        \"pulse\": 72\n      }\n    }],\n    \"medications\": [{\n      \"name\": \"Metformin\",\n      \"dose\": \"500mg\",\n      \"frequency\": \"BID\",\n      \"rxnorm\": \"860975\"\n    }]\n  }\n}\n</code></pre></p> <p>Example HL7 FHIR Query (Python): <pre><code>from fhirclient import client\nimport fhirclient.models.patient as p\n\n# Connect to FHIR server\nsettings = {\n    'app_id': 'my_app',\n    'api_base': 'https://hapi.fhir.org/baseR4'\n}\nserver = client.FHIRClient(settings=settings)\n\n# Search for patients with diabetes\nsearch = p.Patient.where(struct={'condition': 'diabetes'})\npatients = search.perform_resources(server.server)\n\n# Process results\nfor patient in patients:\n    print(f\"Found patient {patient.name[0].given} {patient.name[0].family}\")\n</code></pre></p> <p>Resources: - HealthIT.gov EHR Basics - ONC Health IT Certification - SMART on FHIR Apps</p>"},{"location":"glossary/#icd-international-classification-of-diseases","title":"ICD (International Classification of Diseases)","text":"<p>WHO's foundation for health statistics and outcomes.</p> <p>Example ICD-10 Codes: <pre><code>E11.9    Type 2 diabetes mellitus without complications\nI10      Essential (primary) hypertension\nJ45.909  Unspecified asthma, uncomplicated\nF32.1    Major depressive disorder, single episode, moderate\n</code></pre></p> <p>Example Python Code for ICD Processing: <pre><code>from typing import Dict, List\n\nclass ICDCode:\n    def __init__(self, code: str, description: str):\n        self.code = code\n        self.description = description\n        self.category = self._get_category()\n\n    def _get_category(self) -&gt; str:\n        categories = {\n            'A': 'Infectious diseases',\n            'C': 'Neoplasms',\n            'E': 'Endocrine disorders',\n            'F': 'Mental disorders',\n            'I': 'Circulatory system',\n            'J': 'Respiratory system'\n        }\n        return categories.get(self.code[0], 'Other')\n\n# Example usage\ndiagnoses = [\n    ICDCode('E11.9', 'Type 2 diabetes'),\n    ICDCode('I10', 'Hypertension'),\n    ICDCode('F32.1', 'Depression')\n]\n\n# Group by category\nby_category = {}\nfor dx in diagnoses:\n    if dx.category not in by_category:\n        by_category[dx.category] = []\n    by_category[dx.category].append(dx)\n</code></pre></p> <p>Resources: - WHO ICD-11 - CDC ICD Guidelines - ICD-10 Data Files</p>"},{"location":"glossary/#snomed-ct","title":"SNOMED CT","text":"<p>The most comprehensive clinical healthcare terminology.</p> <p>Example SNOMED CT Concepts: <pre><code>{\n  \"conceptId\": \"73211009\",\n  \"fsn\": \"Diabetes mellitus (disorder)\",\n  \"preferredTerm\": \"Diabetes mellitus\",\n  \"relationships\": [\n    {\n      \"type\": \"116680003\",  // Is a\n      \"target\": \"6475002\"    // Endocrine disorder\n    },\n    {\n      \"type\": \"363698007\", // Finding site\n      \"target\": \"113331007\" // Endocrine system\n    }\n  ],\n  \"mappings\": {\n    \"ICD10\": \"E11.9\",\n    \"ICD11\": \"5A11\"  \n  }\n}\n</code></pre></p> <p>Example SNOMED CT Query (using snowstorm): <pre><code>import requests\n\ndef search_snomed(term: str) -&gt; List[Dict]:\n    \"\"\"Search SNOMED CT concepts\"\"\"\n    url = \"https://snowstorm.ihtsdotools.org/snowstorm/snomed-ct/MAIN/concepts\"\n    params = {\n        \"term\": term,\n        \"activeFilter\": True,\n        \"offset\": 0,\n        \"limit\": 50\n    }\n    response = requests.get(url, params=params)\n    return response.json().get('items', [])\n\n# Example usage\ndiabetes_concepts = search_snomed(\"diabetes mellitus\")\nfor concept in diabetes_concepts:\n    print(f\"{concept['conceptId']}: {concept['fsn']}\")\n</code></pre></p> <p>Resources: - SNOMED International - SNOMED CT Browser - SNOMED CT Implementation Guide</p>"},{"location":"glossary/#data-analysis-in-healthcare","title":"Data Analysis in Healthcare","text":""},{"location":"glossary/#machine-learning-applications","title":"Machine Learning Applications","text":"<p>Common applications of ML in healthcare:</p> <p>Example: Disease Prediction Model <pre><code>import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\n# Load and prepare data\ndef prepare_diabetes_data(df: pd.DataFrame) -&gt; tuple:\n    \"\"\"Prepare diabetes prediction dataset\"\"\"\n    features = ['age', 'bmi', 'blood_pressure', 'glucose']\n    X = df[features]\n    y = df['diabetes']\n    return train_test_split(X, y, test_size=0.2)\n\n# Train model\ndef train_diabetes_model(X_train, y_train) -&gt; RandomForestClassifier:\n    \"\"\"Train diabetes prediction model\"\"\"\n    model = RandomForestClassifier(n_estimators=100)\n    model.fit(X_train, y_train)\n    return model\n\n# Evaluate model\ndef evaluate_model(model, X_test, y_test) -&gt; dict:\n    \"\"\"Evaluate model performance\"\"\"\n    y_pred = model.predict(X_test)\n    return classification_report(y_test, y_pred, output_dict=True)\n\n# Example usage\ndf = pd.read_csv('diabetes_data.csv')\nX_train, X_test, y_train, y_test = prepare_diabetes_data(df)\nmodel = train_diabetes_model(X_train, y_train)\nmetrics = evaluate_model(model, X_test, y_test)\n</code></pre></p> <p>Example: Medical Image Analysis <pre><code>import tensorflow as tf\nfrom tensorflow.keras import layers, Model\n\ndef create_cnn_model(input_shape=(224, 224, 3)):\n    \"\"\"Create CNN for medical image classification\"\"\"\n    inputs = layers.Input(shape=input_shape)\n    x = layers.Conv2D(32, 3, activation='relu')(inputs)\n    x = layers.MaxPooling2D()(x)\n    x = layers.Conv2D(64, 3, activation='relu')(x)\n    x = layers.MaxPooling2D()(x)\n    x = layers.Flatten()(x)\n    x = layers.Dense(128, activation='relu')(x)\n    outputs = layers.Dense(1, activation='sigmoid')(x)\n\n    return Model(inputs, outputs)\n\n# Example training loop\ndef train_model(model, train_ds, val_ds, epochs=10):\n    \"\"\"Train medical image classification model\"\"\"\n    model.compile(\n        optimizer='adam',\n        loss='binary_crossentropy',\n        metrics=['accuracy', tf.keras.metrics.AUC()]\n    )\n\n    return model.fit(\n        train_ds,\n        validation_data=val_ds,\n        epochs=epochs,\n        callbacks=[tf.keras.callbacks.EarlyStopping(patience=3)]\n    )\n</code></pre></p> <p>Resources: - Nature Medicine ML Review - Google Health AI - Fast.ai Medical Imaging</p>"},{"location":"glossary/#statistical-concepts-in-medical-research","title":"Statistical Concepts in Medical Research","text":"<p>Example: Statistical Analysis in Python <pre><code>from scipy import stats\nimport numpy as np\n\nclass ClinicalTrial:\n    def __init__(self, treatment_group, control_group):\n        self.treatment = treatment_group\n        self.control = control_group\n\n    def calculate_statistics(self):\n        \"\"\"Calculate key statistical measures\"\"\"\n        # T-test for difference between groups\n        t_stat, p_value = stats.ttest_ind(self.treatment, self.control)\n\n        # Effect size (Cohen's d)\n        effect_size = (np.mean(self.treatment) - np.mean(self.control)) / \\\n                     np.sqrt((np.var(self.treatment) + np.var(self.control)) / 2)\n\n        # Confidence intervals\n        t_interval = stats.t.interval(\n            alpha=0.95,\n            df=len(self.treatment) + len(self.control) - 2,\n            loc=np.mean(self.treatment) - np.mean(self.control),\n            scale=stats.sem(np.concatenate([self.treatment, self.control]))\n        )\n\n        return {\n            'p_value': p_value,\n            'effect_size': effect_size,\n            'confidence_interval': t_interval\n        }\n\n# Example usage\ntrial = ClinicalTrial(\n    treatment_group=np.random.normal(loc=10, scale=2, size=100),\n    control_group=np.random.normal(loc=8, scale=2, size=100)\n)\n\nresults = trial.calculate_statistics()\nprint(f\"P-value: {results['p_value']:.4f}\")\nprint(f\"Effect size: {results['effect_size']:.2f}\")\nprint(f\"95% CI: [{results['confidence_interval'][0]:.2f}, {results['confidence_interval'][1]:.2f}]\")\n</code></pre></p> <p>Resources: - BMJ Statistics Notes - Nature Methods Statistics Guide - statsmodels Documentation</p>"},{"location":"glossary/#medilang-specific-features","title":"MediLang-Specific Features","text":""},{"location":"glossary/#runtime-features","title":"Runtime Features","text":"<ul> <li>MEDI_BACKTRACE: Environment variable enabling detailed call stack traces for runtime errors</li> <li>Similar to Rust's RUST_BACKTRACE</li> <li>Helps debug execution flow</li> <li>Shows function call hierarchy</li> <li>Includes source locations</li> </ul>"},{"location":"glossary/#development-tools","title":"Development Tools","text":"<ul> <li>Task management system</li> <li>Code analysis tools</li> <li>Testing frameworks</li> <li>Documentation generators</li> </ul> <p>Resources: - MediLang Documentation - GitHub Repository</p> <p>Note: This glossary is actively maintained. For corrections or additions, please submit a pull request or issue on GitHub.</p>"},{"location":"blog/","title":"MediLang Blog","text":"<p>Welcome to the MediLang blog! Here you'll find the latest updates, technical deep dives, and announcements about the Medi programming language.</p>"},{"location":"blog/#latest-posts","title":"Latest Posts","text":""},{"location":"blog/#medilang-v001-released-lexer-parser-ast-and-clinicianfriendly-errors","title":"MediLang v0.0.1 Released: Lexer, Parser, AST, and Clinician\u2011Friendly Errors","text":"<p>August 26, 2025 Our first milestone with end-to-end lexing, parsing, AST generation, clinician-focused errors, and a feature-gated pipeline operator plan.</p>"},{"location":"blog/#journey-to-nested-expressions-building-a-medical-specific-language-feature","title":"Journey to Nested Expressions: Building a Medical-Specific Language Feature","text":"<p>May 24, 2025 A deep dive into implementing nested expressions and medical operators in MediLang</p>"},{"location":"blog/#categories","title":"Categories","text":"<ul> <li>Development</li> <li>Technical</li> </ul>"},{"location":"blog/#tags","title":"Tags","text":"<ul> <li>programming</li> <li>language-design</li> <li>medical-computing</li> <li>nested-expressions</li> <li>technical-deep-dive</li> </ul>"},{"location":"blog/#stay-updated","title":"Stay Updated","text":"<ul> <li>Subscribe to our RSS feed</li> <li>Follow us on GitHub</li> <li>Join our community for discussions</li> </ul>"},{"location":"blog/#search","title":"Search","text":"<p>Use the search bar at the top to find specific blog posts.</p>"},{"location":"blog/posts/2025-05-24-nested-expressions/","title":"Implementing Nested Expressions in MediLang: A Developer's Journey","text":"<p>This is the first in a series of posts documenting the development of MediLang, a programming language designed specifically for healthcare applications.</p>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#the-challenge","title":"The Challenge","text":"<p>When we started building MediLang, we knew we needed a way to express complex medical calculations in a way that felt natural to healthcare professionals. Traditional programming languages often fall short when it comes to medical-specific operations and units. Our solution? Build a language with first-class support for medical concepts.</p>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#our-development-journey","title":"Our Development Journey","text":"","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#phase-1-laying-the-foundation-may-10-11","title":"Phase 1: Laying the Foundation (May 10-11)","text":"<ul> <li>PR #1: Initial project setup and core parser infrastructure</li> <li>PRs #3-4: Documentation and build system configuration</li> </ul>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#phase-2-building-the-core-may-12-17","title":"Phase 2: Building the Core (May 12-17)","text":"<ul> <li>PR #5: First implementation of the recursive descent parser</li> <li>PRs #6-8: Multiple iterations to perfect the parser implementation</li> <li>Added comprehensive test coverage</li> <li>Improved error handling and recovery</li> <li>Enhanced documentation and examples</li> </ul>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#phase-3-advanced-features-may-18-24","title":"Phase 3: Advanced Features (May 18-24)","text":"<ul> <li>PRs #9-10: Implemented custom operator precedence</li> <li>Added support for medical operators (<code>of</code>, <code>per</code>)</li> <li>Detailed documentation of operator behavior</li> <li>PR #11: Nested expressions and block statements</li> <li>Full support for complex nested calculations</li> <li>Improved syntax error messages</li> <li>Edge case handling and optimizations</li> </ul>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#key-features","title":"Key Features","text":"","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#medical-specific-operators","title":"Medical-Specific Operators","text":"<p>MediLang introduces operators that make medical calculations more intuitive:</p> <pre><code>// Calculate total medication dose\nlet total_medication = 2 of 500mg;  // 1000mg total\n\n// Calculate infusion rate\nlet infusion_rate = 1000mL per 8hr;  // 125 mL/hr\n\n// Complex calculation with proper precedence\nlet adjusted_dose = (weight * 2.5mg) + (age * 0.1mg) of medication;\n</code></pre>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#error-messages-that-help","title":"Error Messages That Help","text":"<p>We've put significant effort into making error messages helpful and actionable:</p> <pre><code>Error: Type mismatch in expression\n  --&gt; patient.medi:12:25\n   |\n12 | let dose = 2 of \"500mg\";\n   |             ^ Expected number after 'of', found string\n   |\n   = help: Remove quotes to use a numeric literal\n</code></pre>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#technical-deep-dive","title":"Technical Deep Dive","text":"","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#the-parser-architecture","title":"The Parser Architecture","text":"<p>Our recursive descent parser was carefully designed to handle the unique requirements of medical calculations:</p> <ol> <li>Operator Precedence: Custom rules for medical operators</li> <li>Error Recovery: Graceful handling of syntax errors</li> <li>Performance: Optimized for the most common medical calculation patterns</li> </ol>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#testing-strategy","title":"Testing Strategy","text":"<p>We implemented a comprehensive test suite covering: - Basic arithmetic operations - Nested expressions - Edge cases in medical calculations - Error conditions and recovery</p>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#what-we-learned","title":"What We Learned","text":"<ol> <li> <p>Domain-Specific Languages Matter    Building operators that match medical professionals' mental models makes the language more accessible.</p> </li> <li> <p>Error Messages Are Crucial    Clear, actionable error messages significantly improve the development experience.</p> </li> <li> <p>Iterative Development Wins    Multiple small PRs with focused changes led to better code quality and easier reviews.</p> </li> </ol>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#whats-next","title":"What's Next","text":"<p>Our roadmap includes:</p> <ul> <li> Pattern matching for medical data types</li> <li> Built-in support for common medical calculations</li> <li> Enhanced IDE tooling and autocompletion</li> <li> Standard library of medical functions</li> </ul>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#get-involved","title":"Get Involved","text":"<p>We're just getting started! Join our community: - Try out the latest build - Contribute to our GitHub repository - Join the discussion in our Discord server</p>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-24-nested-expressions/#full-development-history","title":"Full Development History","text":"<p>For a detailed account of all changes, see our CHANGELOG.md.</p>","tags":["programming","language-design","medical-computing","nested-expressions","technical-deep-dive"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/","title":"Optimizing MediLang: Lexer Benchmarks and File Extension Standardization","text":"<p>In our ongoing development of MediLang, we've made significant improvements to our lexer's performance and standardized on the <code>.medi</code> file extension. Here's a deep dive into what changed and why it matters.</p>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#the-need-for-speed-lexer-benchmarks","title":"The Need for Speed: Lexer Benchmarks","text":"<p>As MediLang grows more sophisticated, we need to ensure our toolchain remains fast and efficient. We implemented a comprehensive benchmarking suite to measure and compare the performance of our different lexer implementations.</p>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#meet-the-lexers","title":"Meet the Lexers","text":"<p>We currently maintain three different lexer implementations, each with its own strengths:</p> <ol> <li>OriginalLexer</li> <li>The standard implementation that balances performance and simplicity</li> <li>Uses moderate memory (25MB for 1MB input)</li> <li> <p>Processes tokens in a straightforward manner</p> </li> <li> <p>StreamingLexer</p> </li> <li>Optimized for memory efficiency</li> <li>Processes input in a streaming fashion</li> <li>Uses only 5MB of memory for the same 1MB input</li> <li> <p>Slightly faster than the OriginalLexer</p> </li> <li> <p>ChunkedLexer</p> </li> <li>Processes input in fixed-size chunks</li> <li>Ideal for very large files</li> <li>Consistent memory usage at 10MB</li> <li>Higher latency but stable performance</li> </ol>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#benchmark-results","title":"Benchmark Results","text":"<p>Our latest benchmarks show significant performance improvements in the MediLang lexer. Here are the results from processing 12,300 tokens (approximately 73KB of source code) across 10 iterations:</p> Metric Value Total Tokens Processed 123,000 Tokens per Iteration 12,300 Fastest Iteration 1.50 ms Slowest Iteration 2.42 ms Average Time 1.87 ms Tokens per Second 6.57 million Memory Usage &lt;5MB <p>These results demonstrate that our lexer can process over 6.5 million tokens per second with minimal memory overhead. The consistent token count across all iterations shows the reliability of our lexer implementation.</p>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#standardizing-on-medi","title":"Standardizing on .medi","text":"<p>We've also standardized on using <code>.medi</code> as the official file extension for Medi source files. This change brings several benefits:</p> <ol> <li>Consistency: A single, standard extension makes it easier to identify Medi files</li> <li>Tooling: Better support in editors and IDEs with proper syntax highlighting</li> <li>Clarity: Distinguishes Medi files from other similar-looking extensions</li> </ol>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#what-changed","title":"What Changed","text":"<ul> <li>Updated all example code and documentation to use <code>.medi</code></li> <li>Modified the compiler and tools to recognize <code>.medi</code> files</li> <li>Updated build systems and CI/CD pipelines</li> </ul>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#choosing-the-right-lexer","title":"Choosing the Right Lexer","text":"<p>Based on our benchmarks, here's our recommendation for choosing a lexer:</p> <ul> <li>Use StreamingLexer for most cases, especially with large files</li> <li>Use OriginalLexer when you need the simplest implementation</li> <li>Use ChunkedLexer for processing extremely large files with limited memory</li> </ul>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#whats-next","title":"What's Next","text":"<p>We'll continue to optimize our lexer implementations and add more comprehensive benchmarks. Future work includes:</p> <ul> <li>Adding more detailed memory profiling</li> <li>Implementing parallel lexing for multi-core systems</li> <li>Exploring just-in-time compilation for frequently executed lexing patterns</li> </ul>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-05-30-lexer-benchmarks-and-file-extension/#get-involved","title":"Get Involved","text":"<p>We'd love to hear about your experiences with these changes! If you have feedback or want to contribute to MediLang's development, check out our GitHub repository.</p> <pre><code>// Example Medi code with the new .medi extension\nprotocol PatientData {\n  name: string\n  age: int\n  conditions: list[string]\n}\n\nfn analyze_patient(patient: PatientData) -&gt; RiskScore {\n  // Implementation here\n  let score = 0;\n\n  // Example: Calculate risk based on conditions\n  if patient.conditions.contains(\"diabetes\") {\n    score += 10;\n  }\n\n  if patient.age &gt; 60 {\n    score += 5;\n  }\n\n  score\n}\n\n// Example usage\nlet patient = PatientData {\n  name: \"John Doe\",\n  age: 65,\n  conditions: [\"hypertension\", \"diabetes\"]\n};\n\nlet risk = analyze_patient(patient);\nprintln!(\"Risk score: {}\", risk);\n</code></pre> <p>Stay tuned for more updates as we continue to improve MediLang!</p>","tags":["programming","performance","benchmarks","lexer","file-format"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/","title":"MediLang v0.0.1 Released","text":"<p>We\u2019re excited to announce MediLang v0.0.1 \u2014 our first milestone with an end-to-end toolchain for healthcare-oriented programming.</p>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/#highlights","title":"Highlights","text":"<ul> <li>Core lexer and parser aligned with <code>LANG_SPEC.md</code></li> <li>Unicode-aware source locations and robust streaming/chunked lexing</li> <li>Abstract Syntax Tree (AST) generation with position preservation and traversal</li> <li>Clinician-friendly error reporting with clear, contextual messages and recovery paths</li> <li>Feature-gated plan for a pipeline operator (<code>|&gt;</code>) \u2014 default off, fully backward compatible</li> </ul>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/#whats-in-v001","title":"What\u2019s in v0.0.1","text":"<ul> <li>Lexer</li> <li>Healthcare-aware tokens and medical literals (e.g., <code>pid(\"PT123\")</code>, <code>icd10(\"A00.0\")</code>)</li> <li>UTF\u20118 and cross\u2011platform newline normalization, standardized error tokens</li> <li>Streaming/chunked modes for large inputs with bounded memory</li> <li>Parser</li> <li>Recursive descent covering core grammar and healthcare constructs</li> <li>Operator precedence, nested expressions, and resilient error handling</li> <li>AST</li> <li>Well-defined nodes, preserved locations, visitors, and tests</li> <li>Errors</li> <li>Clear messages suitable for clinicians; recovery to continue parsing; test coverage</li> <li>Pipeline operator plan</li> <li>Design for optional single-token <code>|&gt;</code> behind <code>pipeline_op</code> Cargo feature</li> <li>Default behavior unchanged: <code>|&gt;</code> lexes as <code>|</code> + <code>&gt;</code>; tests pass in both modes</li> </ul>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/#enabling-the-optional-pipeline-operator","title":"Enabling the optional pipeline operator","text":"<p>By default, <code>|&gt;</code> is not a single token. To experiment with the feature-gated variant:</p> <pre><code>cargo test -p medic_lexer --features pipeline_op\n</code></pre> <p>This recognizes <code>|&gt;</code> as a single token across streaming and chunked lexers, including cross-chunk boundaries.</p>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/#getting-started","title":"Getting Started","text":"<ul> <li>Read the language docs in <code>docs/</code></li> <li>Try the examples and run the test suite:</li> </ul> <pre><code>cargo test --all\n</code></pre>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-08-26-v0-0-1-release/#looking-ahead","title":"Looking Ahead","text":"<ul> <li>Broader type system capabilities for healthcare data</li> <li>Continued performance work and more diagnostics polish</li> <li>Community feedback to guide next features</li> </ul> <p>Thanks for following along \u2014 and thank you to contributors testing and profiling the early runtime!</p>","tags":["programming","language-design","healthcare","lexer","parser","ast","error-reporting","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/","title":"MediLang v0.0.2 Released","text":"<p>We\u2019ve shipped MediLang v0.0.2 \u2014 a release focused on healthcare-native types, robust type annotation tests, and HIPAA-style privacy/data-flow checks. This milestone hardens correctness and reliability across the compiler pipeline.</p>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#highlights","title":"Highlights","text":"<ul> <li>Robust type annotation tests for <code>let</code> bindings (match, mismatch, inference)</li> <li>Healthcare-first core types: <code>PatientId</code>, <code>Vital</code>, <code>LabResult</code>, <code>FHIRPatient</code>, <code>Observation</code>, and more</li> <li>HIPAA-style privacy flows: environment-driven sink and de-identification function recognition</li> <li>Lexer property-test stabilization; pre-commit checks now green end-to-end</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#whats-in-v002","title":"What\u2019s in v0.0.2","text":"","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#type-system-tests","title":"Type System &amp; Tests","text":"<ul> <li>Comprehensive <code>let</code> annotation tests in <code>tests/src/let_annotations.rs</code></li> <li>Match vs. mismatch with clear diagnostics</li> <li>Inference without annotations</li> <li>Complex nested struct annotations across <code>type</code> declarations</li> <li>Side type-table assertions using the <code>TypeChecker</code> side table</li> <li>Unknown annotations align with checker semantics: <code>let y: Foo;</code> binds <code>Unknown</code> and records it (no error)</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#healthcare-types","title":"Healthcare Types","text":"<ul> <li>Domain-centric types for clinical data modeling</li> <li>Integration tests to validate clinical entities and operations</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#privacy-hipaa-style-flows","title":"Privacy &amp; HIPAA-Style Flows","text":"<ul> <li>Environment-driven function metadata for sinks and de-identification</li> <li><code>TypeEnv::{get_sink_fn, is_deid_fn}</code> consulted by the type checker</li> <li>Privacy annotations and enforcement (e.g., <code>PHI</code>, <code>Pseudonymized</code>, <code>Anonymized</code>, <code>Authorized</code>, <code>AuthorizedFor</code>)</li> <li>Unit/integration tests covering healthcare privacy flows</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#lexer-reliability","title":"Lexer Reliability","text":"<ul> <li>Property-test sample adjusted to ensure parity between plain and chunked lexers</li> <li>All pre-commit checks (fmt, clippy, check, test) pass cleanly</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#try-it","title":"Try It","text":"<p>Clone and run tests:</p> <pre><code># clone\ngit clone https://github.com/MediLang/medi.git\ncd medi\n\n# run the full test suite\ncargo test --all\n</code></pre> <p>Optional lexer feature (<code>|&gt;</code> as a single token):</p> <pre><code>cargo test -p medic_lexer --features pipeline_op\n</code></pre>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#links","title":"Links","text":"<ul> <li>Release notes: https://github.com/MediLang/medi/releases/tag/v0.0.2</li> <li>Changelog: https://github.com/MediLang/medi/blob/main/CHANGELOG.md</li> <li>Repository: https://github.com/MediLang/medi</li> </ul>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"blog/posts/2025-09-02-v0-0-2-release/#looking-ahead","title":"Looking Ahead","text":"<ul> <li>Broader type coverage for clinical workflows and records</li> <li>Expanded privacy/data-governance checks and diagnostics</li> <li>Continued performance work and developer tooling improvements</li> </ul> <p>Thanks to everyone testing, filing issues, and contributing!</p>","tags":["programming","language-design","healthcare","typesystem","privacy","hipaa","release"]},{"location":"community/","title":"Medi Community","text":""},{"location":"community/#join-our-community","title":"Join Our Community","text":"<p>The Medi programming language is being built by a community of healthcare professionals, researchers, developers, and enthusiasts who believe in the power of specialized tools for medical analytics. We welcome contributions from all backgrounds and skill levels.</p>"},{"location":"community/#ways-to-get-involved","title":"Ways to Get Involved","text":""},{"location":"community/#connect-with-us","title":"Connect With Us","text":"<ul> <li>GitHub: Follow our repository for the latest updates</li> <li>Website: Visit our official website for more information</li> </ul>"},{"location":"community/#contribute","title":"Contribute","text":"<p>There are many ways to contribute to Medi:</p> <ul> <li>Code: Help develop the language, compiler, standard library, or tools</li> <li>Documentation: Improve our documentation, tutorials, and examples</li> <li>Testing: Test the language in real-world healthcare scenarios</li> <li>Feedback: Share your ideas and suggestions for new features</li> <li>Outreach: Help spread the word about Medi in the healthcare community</li> </ul> <p>See our Contributing guide for more details on how to get started.</p>"},{"location":"community/#community-guidelines","title":"Community Guidelines","text":"<p>Our community is guided by these principles:</p> <ul> <li>Inclusivity: We welcome participants from all backgrounds and skill levels</li> <li>Respect: Treat all community members with respect and kindness</li> <li>Collaboration: Work together to build something great</li> <li>Transparency: Open decision-making and clear communication</li> </ul>"},{"location":"community/#community-events","title":"Community Events","text":"<p>As Medi grows, we'll organize various events such as:</p> <ul> <li>Online meetups and webinars</li> <li>Hackathons focused on healthcare applications</li> <li>Conference presentations</li> <li>Training workshops</li> </ul> <p>Check back for updates on upcoming events!</p>"},{"location":"content/blog/","title":"Blog","text":""},{"location":"contributing/","title":"Contributing to Medi","text":"<p>First off, thank you for considering contributing to Medi! It's people like you that make Medi such a great tool.</p>"},{"location":"contributing/#where-do-i-go-from-here","title":"Where do I go from here?","text":"<p>If you've noticed a bug or have a question, search the issue tracker to see if someone else has already reported the issue. If not, feel free to open a new issue.</p>"},{"location":"contributing/#fork-pull-request","title":"Fork &amp; Pull Request","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone the project to your own machine.</li> <li>Commit changes to your own branch.</li> <li>Push your work back up to your fork.</li> <li>Submit a Pull Request so that we can review your changes.</li> </ol> <p>!!! note     Be sure to merge the latest from \"upstream\" before making a pull request!</p>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>Follow the style used throughout the project.</li> <li>Write clear, readable code and meaningful comments.</li> <li>Test your code before submitting pull requests.</li> </ul>"},{"location":"contributing/#community-guidelines","title":"Community Guidelines","text":"<ul> <li>Be respectful and inclusive in all interactions.</li> <li>Provide constructive feedback.</li> <li>Help newcomers get started with the project.</li> </ul>"},{"location":"examples/","title":"Medi Examples","text":"<p>This section provides practical examples of Medi code for various healthcare applications.</p>"},{"location":"examples/#example-categories","title":"Example Categories","text":"<ul> <li>Clinical Decision Support</li> <li>Genomic Analysis</li> <li>Real-time Patient Monitoring</li> <li>Medical Imaging</li> <li>Clinical Trials</li> <li>Hospital Operations</li> </ul>"},{"location":"examples/#featured-example-diabetes-risk-prediction","title":"Featured Example: Diabetes Risk Prediction","text":"<p>Below is a complete example of a diabetes risk prediction model using Medi:</p> <pre><code>// Diabetes Risk Prediction Model\n// Uses federated learning across multiple hospitals\n\n// Configure federation\nfederated diabetes_prediction {\n  sites: [\"hospital_a\", \"hospital_b\", \"hospital_c\"],\n  privacy: {\n    epsilon: 0.1,  // Differential privacy parameter\n    secure_aggregation: true\n  }\n};\n\n// Load FHIR data from each site\ndataset patients = fhir_query(\"Patient\", filter: \"age&gt;30\");\ndataset labs = fhir_query(\"Observation\", filter: \"code=glucose,hba1c,bmi\");\n\n// Join datasets\ndataset training_data = patients\n  |&gt; join(labs, on: \"patient_id\")\n  |&gt; preprocess();\n\n// Define model\nmodel = diabetes_model {\n  type: \"random_forest\",\n  features: [\"age\", \"gender\", \"bmi\", \"glucose\", \"hba1c\", \"family_history\"],\n  target: \"diabetes_diagnosis\",\n  hyperparameters: {\n    n_estimators: 100,\n    max_depth: 10\n  }\n};\n\n// Train federated model\ndiabetes_prediction.train(model, data: training_data);\n\n// Evaluate model\nmetrics = diabetes_prediction.evaluate();\nprint(\"Model accuracy: \" + metrics.accuracy);\nprint(\"Model AUC: \" + metrics.auc);\n\n// Predict for new patients\ndataset new_patients = load_csv(\"new_patients.csv\");\npredictions = model.predict(new_patients);\n\n// Visualize results\nvisualize {\n  plot_roc(metrics, title: \"Diabetes Model ROC Curve\");\n  plot_feature_importance(model, title: \"Feature Importance\");\n  plot_risk_scores(new_patients, predictions, title: \"Risk Distribution\");\n};\n\n// Generate report\nreport {\n  template: \"clinical_model\",\n  data: {\n    model: model,\n    metrics: metrics,\n    predictions: predictions\n  },\n  output: \"diabetes_risk_model_report.pdf\"\n};\n</code></pre>"},{"location":"examples/#additional-resources","title":"Additional Resources","text":"<ul> <li>Standard Library Reference</li> <li>Best Practices</li> <li>Community Examples Repository</li> </ul>"},{"location":"getting-started/","title":"Getting Started with Medi","text":"<p>This section guides you through the first steps with Medi, from installation to writing your first program.</p>"},{"location":"getting-started/#contents","title":"Contents","text":"<ul> <li>Installation - Set up Medi on your system</li> <li>Basic Syntax - Introduction to Medi's syntax</li> <li>First Medi Program - Write and run your first Medi program</li> <li>Development Environment - IDE setup and tools</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Medi is designed to be beginner-friendly, especially for those with healthcare backgrounds. Prior programming experience is helpful but not required. If you're familiar with Python, R, or SQL, you'll find Medi's syntax intuitive.</p>"},{"location":"getting-started/basic-syntax/","title":"Medi Basic Syntax","text":"<p>Medi's syntax is designed to be intuitive for both beginners and experienced programmers, with special attention to healthcare domain needs. Medi follows a Rust-inspired approach with clean, modern syntax while maintaining healthcare-specific features.</p>"},{"location":"getting-started/basic-syntax/#file-extension","title":"File Extension","text":"<p>Medi source files use the <code>.medi</code> extension: <pre><code>myprogram.medi\npatient_analysis.medi\n</code></pre></p>"},{"location":"getting-started/basic-syntax/#variables-and-types","title":"Variables and Types","text":"<p>Medi uses type inference but also supports explicit typing. Variables are declared with <code>let</code> and can be made mutable with <code>mut</code>:</p> <pre><code>// Type inference with let\nlet patient_name = \"John Doe\";  // string\nlet heart_rate = 75;           // int\nlet temperature = 98.6;        // float\nlet is_critical = false;       // bool\n\n// Explicit type annotations\nlet patient_id: string = \"P-12345\";\nlet bp_systolic: int = 120;\nlet bmi: float = 22.5;\n\n// Mutable variables\nlet mut count = 0;\ncount += 1;  // This works because count is mutable\n\n// Constants (must be explicitly typed)\nconst MAX_HEART_RATE: int = 220;\nconst PI: float = 3.14159;\n</code></pre>"},{"location":"getting-started/basic-syntax/#healthcare-data-types","title":"Healthcare Data Types","text":"<p>Medi includes native support for healthcare data types and integrates with healthcare standards:</p> <pre><code>// FHIR resources (automatically mapped to Medi types)\nlet patient = fhir::Patient.get(\"P-12345\");\nlet observations = fhir::Observation.search(patient: patient.id, category: \"vital-signs\");\n\n// Working with medical records\nlet record = MedicalRecord {\n  id: \"MR-45678\",\n  patient: patient,\n  conditions: [\"Type 2 Diabetes\", \"Hypertension\"],\n  medications: [\n    Medication { name: \"Metformin\", dosage: \"500mg\", frequency: \"BID\" },\n    Medication { name: \"Lisinopril\", dosage: \"10mg\", frequency: \"Daily\" }\n  ]\n};\n\n// Genomic data\nlet variants = vcf::load(\"sample.vcf\");\nlet pathogenic_variants = variants.filter(|v| v.clinical_significance == \"Pathogenic\");\n\n// Time series data (for vital signs, ECGs, etc.)\nlet ecg = timeseries::from_csv(\"ecg_data.csv\")?;\nlet heart_rate_variability = ecg.calculate_hrv();\n\n// Medical imaging\nlet mri = dicom::load(\"brain_scan.dcm\")?;\nlet tumor_volume = mri.segment_tumor().calculate_volume();\n\n// Working with medical codes\nlet icd10 = icd10::from_code(\"E11.65\");  // Type 2 diabetes with hyperglycemia\nlet snomed = snomed::from_code(\"44054006\");  // Diabetes mellitus\n</code></pre>"},{"location":"getting-started/basic-syntax/#control-flow","title":"Control Flow","text":"<p>Medi's control flow constructs are similar to Rust and other C-like languages:</p> <pre><code>// If-else statement\nif heart_rate &gt; 100 {\n  alert(\"Tachycardia detected\");\n} else if heart_rate &lt; 60 {\n  alert(\"Bradycardia detected\");\n} else {\n  log(\"Normal heart rate\");\n}\n\n// For loop with pattern matching\nfor patient in patients {\n  calculate_risk_score(patient);\n}\n\n// While loop\nwhile monitoring_active {\n  read_vitals();\n  std::thread::sleep(std::time::Duration::from_millis(1000));\n}\n\n// Match expression (like switch/case but more powerful)\nmatch patient_status {\n  \"critical\" =&gt; {\n    alert_doctor();\n    increase_monitoring();\n  },\n  \"stable\" =&gt; log(\"Patient is stable\"),\n  _ =&gt; log(\"Unknown status\"),\n}\n\n// Concise match expression syntax in expression context\n// Equivalent to: match status { ... }\nstatus {\n  \"ok\" =&gt; 1,\n  \"warn\" =&gt; 2,\n  _ =&gt; 0,\n}\n</code></pre>"},{"location":"getting-started/basic-syntax/#functions","title":"Functions","text":"<p>Functions are declared with the <code>fn</code> keyword:</p> <pre><code>// Basic function\nfn calculate_bmi(weight_kg, height_m) {\n  weight_kg / (height_m * height_m)\n}\n\n// Function with explicit types\nfn is_hypertensive(systolic: int, diastolic: int) -&gt; bool {\n  systolic &gt;= 140 || diastolic &gt;= 90\n}\n\n// With default parameters\nfn administer_medication(med_id: string, dose: float, route: string = \"oral\") {\n  // Implementation\n}\n</code></pre>"},{"location":"getting-started/basic-syntax/#data-pipeline-operators","title":"Data Pipeline Operators","text":"<p>Medi supports data pipelines inspired by R and F#:</p> <pre><code>// Pipeline operator |&gt;\npatients\n  |&gt; filter(condition: \"diabetes\")\n  |&gt; sort(by: \"a1c_level\", descending: true)\n  |&gt; limit(10)\n  |&gt; plot_risk_score();\n</code></pre>"},{"location":"getting-started/basic-syntax/#healthcare-specific-syntax","title":"Healthcare-Specific Syntax","text":"<pre><code>// FHIR queries\ndataset diabetic_patients = fhir_query(\"Patient\", filter: \"condition=diabetes\");\n\n// Compliance checks\nregulate {\n  standard: \"HIPAA\",\n  data: patient_records,\n  checks: [\"phi_identification\", \"access_control\"]\n};\n\n// Privacy-preserving analytics\nfederated {\n  sites: [\"hospital_a\", \"hospital_b\", \"hospital_c\"],\n  model: \"random_forest\",\n  target: \"readmission_risk\"\n};\n</code></pre>"},{"location":"getting-started/basic-syntax/#error-handling","title":"Error Handling","text":"<pre><code>try {\n  result = analyze_bloodwork(sample_id);\n} catch (SampleNotFoundError e) {\n  log(\"Sample not found: \" + e.message);\n  request_new_sample();\n} catch (AnalysisError e) {\n  log(\"Analysis failed: \" + e.message);\n  retry_analysis();\n} finally {\n  cleanup_resources();\n}\n</code></pre>"},{"location":"getting-started/basic-syntax/#next-steps","title":"Next Steps","text":"<ul> <li>Try a complete Medi program</li> <li>Learn about Medi's standard library</li> <li>Explore Medical Data Science features</li> </ul>"},{"location":"getting-started/first-program/","title":"Your First Medi Program","text":"<p>This guide walks you through creating and running your first Medi program.</p>"},{"location":"getting-started/first-program/#a-simple-health-risk-calculator","title":"A Simple Health Risk Calculator","text":"<p>Let's create a simple program that calculates a basic health risk score based on patient parameters.</p> <p>Create a file named <code>risk_calculator.medi</code> with the following content:</p> <pre><code>// First Medi Program: Health Risk Calculator\n\n// Define our risk calculation function\nfn calculate_risk_score(age: int, systolic_bp: int, diastolic_bp: int, is_smoker: bool, has_diabetes: bool) -&gt; int {\n  // Start with base score based on age\n  let mut score = age / 10;\n\n  // Add points for blood pressure\n  if systolic_bp &gt;= 140 || diastolic_bp &gt;= 90 {\n    score += 2;\n  } else if systolic_bp &gt;= 120 || diastolic_bp &gt;= 80 {\n    score += 1;\n  }\n\n  // Add points for risk factors\n  if is_smoker { score += 3; }\n  if has_diabetes { score += 2; }\n\n  score\n}\n\n// Define a patient record type\nrecord Patient {\n  name: string,\n  age: int,\n  systolic: int,\n  diastolic: int,\n  smoker: bool,\n  diabetes: bool\n}\n\n// Sample patient data\nlet patients: list[Patient] = [\n  Patient{name: \"Patient A\", age: 45, systolic: 130, diastolic: 85, smoker: true, diabetes: false},\n  Patient{name: \"Patient B\", age: 60, systolic: 145, diastolic: 95, smoker: false, diabetes: true},\n  Patient{name: \"Patient C\", age: 30, systolic: 115, diastolic: 75, smoker: false, diabetes: false}\n];\n\n// Calculate and display risk for each patient\nfor patient in patients {\n  let risk = calculate_risk_score(\n    patient.age,\n    patient.systolic,\n    patient.diastolic,\n    patient.smoker,\n    patient.diabetes\n  );\n\n  // Display result\n  println!(\"{} risk score: {}\", patient.name, risk);\n}\n\n  // Risk classification\n  if (risk &lt; 5) {\n    print(\"  Status: Low Risk\");\n  } else if (risk &lt; 10) {\n    print(\"  Status: Moderate Risk\");\n  } else {\n    print(\"  Status: High Risk\");\n  }\n}\n\n// Visualize results\nvisualize {\n  plot_bar(\n    data: patients,\n    x: \"name\",\n    y: (p) =&gt; calculate_risk_score(p.age, p.systolic, p.diastolic, p.smoker, p.diabetes),\n    title: \"Patient Risk Scores\",\n    y_label: \"Risk Score\"\n  );\n}\n</code></pre>"},{"location":"getting-started/first-program/#running-the-program","title":"Running the Program","text":"<p>Save the file and run it using the Medi interpreter:</p> <pre><code>medi risk_calculator.medi\n</code></pre> <p>You should see output similar to:</p> <pre><code>Patient A risk score: 9.5\n  Status: Moderate Risk\nPatient B risk score: 12\n  Status: High Risk\nPatient C risk score: 3\n  Status: Low Risk\n</code></pre> <p>A new window will also open displaying a bar chart of the patient risk scores.</p>"},{"location":"getting-started/first-program/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ol> <li>Function Definition: The <code>calculate_risk_score</code> function</li> <li>Data Structures: Using the <code>dataset</code> type for patient records</li> <li>Control Flow: <code>if/else</code> statements and <code>for</code> loops</li> <li>Visualization: Simple bar chart creation with the <code>visualize</code> block</li> </ol>"},{"location":"getting-started/first-program/#next-steps","title":"Next Steps","text":"<ul> <li>Try modifying the risk calculation formula</li> <li>Add more patient data</li> <li>Explore more complex visualizations</li> <li>Learn about integrating with healthcare standards like FHIR</li> </ul>"},{"location":"getting-started/installation/","title":"Installing Medi","text":"<p>Medi is currently in pre-alpha development. This guide will walk you through setting up the Medi development environment.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Linux (Ubuntu 20.04+, Debian 11+), macOS (10.15+), or Windows 10/11</li> <li>Memory: 8GB RAM minimum (16GB recommended)</li> <li>Disk Space: 2GB for basic installation</li> <li>Optional Requirements:</li> <li>CUDA-compatible GPU for AI and parallel processing features</li> <li>RISC-V development board for edge device testing</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#option-1-pre-built-binaries-recommended","title":"Option 1: Pre-built Binaries (Recommended)","text":"<pre><code># Download the Medi installer\ncurl -sSL https://get.medi-lang.org | bash\n\n# Verify installation\nmedi --version\n</code></pre>"},{"location":"getting-started/installation/#option-2-building-from-source","title":"Option 2: Building from Source","text":"<pre><code># Clone the repository\ngit clone https://github.com/MediLang/medi.git\ncd medi\n\n# Install dependencies\n./scripts/install_deps.sh\n\n# Build Medi\nmake\n\n# Install\nsudo make install\n\n# Verify installation\nmedi --version\n</code></pre>"},{"location":"getting-started/installation/#option-3-docker-container","title":"Option 3: Docker Container","text":"<pre><code># Pull the Medi Docker image\ndocker pull medilang/medi:latest\n\n# Run a Medi container\ndocker run -it --rm medilang/medi medi --version\n</code></pre>"},{"location":"getting-started/installation/#ide-setup","title":"IDE Setup","text":"<p>The Medi IDE (Medi Studio) can be installed separately:</p> <pre><code>medi install-ide\n</code></pre> <p>Alternatively, you can use Medi with VS Code by installing the Medi extension from the marketplace.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Medi's basic syntax</li> <li>Try your first Medi program</li> <li>Explore the standard library</li> </ul>"},{"location":"key-features/","title":"Key Features of Medi","text":"<p>Medi is designed with healthcare-specific features that set it apart from general-purpose programming languages.</p>"},{"location":"key-features/#core-features","title":"Core Features","text":"<ul> <li>Beginner-Friendly Syntax - Intuitive language constructs ideal for healthcare professionals</li> <li>Medical Data Science and AI - Built-in tools for healthcare analytics and artificial intelligence</li> <li>Privacy and Compliance - Native constructs for HIPAA, GDPR, and other regulatory standards</li> <li>Performance Optimization - LLVM compilation, RISC-V support, and WebAssembly output</li> <li>Healthcare Standards - Native support for FHIR, HL7, DICOM, and genomic formats</li> <li>Interoperability - Seamless integration with Python, R, and healthcare systems</li> </ul>"},{"location":"key-features/#what-makes-medi-unique","title":"What Makes Medi Unique?","text":""},{"location":"key-features/#for-clinicians-and-healthcare-professionals","title":"For Clinicians and Healthcare Professionals","text":"<p>Medi empowers clinicians with no programming background to perform complex analytics with minimal training:</p> <ul> <li>Natural language queries</li> <li>Visual programming interface</li> <li>Domain-specific functions that map to clinical workflows</li> <li>Automatic compliance checking</li> </ul>"},{"location":"key-features/#for-researchers-and-data-scientists","title":"For Researchers and Data Scientists","text":"<p>Medi accelerates healthcare research with:</p> <ul> <li>High-performance genomic and imaging analysis</li> <li>Privacy-preserving federated learning</li> <li>Built-in statistical methods for clinical trials</li> <li>Scalable processing of massive health datasets</li> </ul>"},{"location":"key-features/#for-healthcare-developers","title":"For Healthcare Developers","text":"<p>Medi simplifies development of healthcare applications with:</p> <ul> <li>Pre-built components for regulatory compliance</li> <li>Native FHIR/HL7 support eliminating complex integrations</li> <li>Optimized runtime for edge devices like wearables</li> <li>Consistent cross-platform performance</li> </ul>"},{"location":"key-features/medical-data-science/","title":"Medical Data Science and AI","text":"<p>Medi redefines healthcare analytics with powerful, accessible data science and AI tools designed specifically for medical applications.</p>"},{"location":"key-features/medical-data-science/#data-science-capabilities","title":"Data Science Capabilities","text":""},{"location":"key-features/medical-data-science/#advanced-statistical-analysis","title":"Advanced Statistical Analysis","text":"<p>Medi includes built-in methods for common healthcare statistical operations:</p> <pre><code>// Survival analysis for clinical trials\nsurvival_curve = kaplan_meier(\n  data: trial_data,\n  time: \"follow_up_days\",\n  event: \"disease_progression\"\n);\n\n// Epidemiological modeling\noutbreak_prediction = sir_model(\n  population: 1000000,\n  initial_infected: 100,\n  r0: 2.5,\n  recovery_days: 14\n);\n\n// Hospital resource optimization\nbed_allocation = optimize_resources(\n  hospital_data,\n  objective: \"minimize_wait_time\",\n  constraints: [\"max_beds = 500\", \"min_staff_ratio = 0.25\"]\n);\n</code></pre>"},{"location":"key-features/medical-data-science/#big-data-processing","title":"Big Data Processing","text":"<p>Medi scales effortlessly to process massive healthcare datasets:</p> <pre><code>// Process and analyze 10TB genomic dataset\ndataset genome_data = parallel {\n  load_bulk_genomic(\n    path: \"/data/genomes/\",\n    format: \"FASTQ\",\n    chunk_size: \"1GB\"\n  );\n};\n\n// Distributed EHR processing\ndataset patient_records = distributed {\n  nodes: cluster.nodes,\n  data: ehr_query(\"SELECT * FROM encounters\"),\n  operation: preprocess_encounters\n};\n</code></pre>"},{"location":"key-features/medical-data-science/#visualization","title":"Visualization","text":"<p>Create interactive, clinician-friendly visualizations with a few lines of code:</p> <pre><code>visualize {\n  // Forest plot for meta-analysis\n  plot_forest(\n    meta_analysis_results,\n    title: \"Treatment Efficacy Across Studies\",\n    sort_by: \"effect_size\"\n  );\n\n  // Risk score visualization\n  plot_risk_score(\n    patient_cohort,\n    risk_function: predict_cardiac_risk,\n    stratify_by: \"age_group\",\n    annotate: [\"high_risk_patients\"]\n  );\n\n  // Save interactive dashboard\n  save(\"cardiac_risk_dashboard.html\", interactive: true);\n}\n</code></pre>"},{"location":"key-features/medical-data-science/#artificial-intelligence","title":"Artificial Intelligence","text":""},{"location":"key-features/medical-data-science/#pre-trained-healthcare-models","title":"Pre-Trained Healthcare Models","text":"<p>Medi's <code>medi.ai</code> module provides ready-to-use models for common healthcare tasks:</p> <pre><code>// Detect lung nodules in CT scans\ndetection_results = medi.ai.imaging.detect_lung_nodules(\n  images: patient_ct_scans,\n  sensitivity: \"high\",\n  return_confidence: true\n);\n\n// Predict heart failure risk\nrisk_scores = medi.ai.predict_risk(\n  data: patient_data,\n  condition: \"heart_failure\",\n  timeframe: \"5_years\",\n  features: [\"age\", \"bp\", \"bmi\", \"medications\", \"comorbidities\"]\n);\n\n// Analyze clinical notes\nsentiment_analysis = medi.ai.nlp.analyze_notes(\n  text: clinical_notes,\n  extract: [\"symptoms\", \"medications\", \"sentiment\"]\n);\n</code></pre>"},{"location":"key-features/medical-data-science/#federated-learning","title":"Federated Learning","text":"<p>Train AI models across hospitals without sharing sensitive data:</p> <pre><code>// Set up federated learning\nfederated pneumonia_detection {\n  sites: [\"hospital_a\", \"hospital_b\", \"hospital_c\"],\n  model: \"cnn\",\n  data_spec: {\n    x: \"chest_xray\",\n    y: \"pneumonia_diagnosis\"\n  },\n  privacy: {\n    differential_privacy: true,\n    epsilon: 0.5\n  }\n};\n\n// Train the model\npneumonia_detection.train(\n  epochs: 50,\n  batch_size: 32,\n  optimizer: \"adam\"\n);\n\n// Evaluate performance at each site\nsite_metrics = pneumonia_detection.evaluate_local();\nglobal_metrics = pneumonia_detection.evaluate_global();\n</code></pre>"},{"location":"key-features/medical-data-science/#real-time-ai","title":"Real-Time AI","text":"<p>Implement low-latency inference on edge devices like wearables:</p> <pre><code>// Define ECG analysis for wearable\nstream ecg_stream = connect(\"wearable_001\", protocol: \"MQTT\");\nmodel = medi.ai.load_model(\"arrhythmia_detection.medi\");\n\n// Optimize for edge deployment\nedge_model = model.optimize(\n  target: \"wearable\",\n  format: \"wasm\",\n  quantize: true\n);\n\n// Real-time monitoring\nmonitor ecg_stream {\n  // Process each batch of ECG data\n  window = collect(seconds: 5);\n\n  // Run inference\n  predictions = edge_model.predict(window);\n\n  // Alert on detected arrhythmia\n  if (predictions.contains(\"ventricular_tachycardia\")) {\n    alert(\"Critical arrhythmia detected\", priority: \"high\");\n  }\n};\n</code></pre>"},{"location":"key-features/medical-data-science/#explainable-ai","title":"Explainable AI","text":"<p>Ensure transparency and trust in AI-driven healthcare decisions:</p> <pre><code>// Get explanations for AI predictions\nexplanations = model.explain(\n  prediction: diagnosis_prediction,\n  method: \"shap\",\n  num_features: 10\n);\n\n// Visualize feature importance\nvisualize {\n  plot_explanation(\n    explanations,\n    title: \"Factors Influencing Diagnosis\"\n  );\n};\n\n// Generate clinical report with explanations\nreport {\n  template: \"ai_diagnosis\",\n  prediction: diagnosis_prediction,\n  explanation: explanations,\n  confidence: model.confidence,\n  output: \"explainable_ai_report.pdf\"\n};\n</code></pre>"},{"location":"key-features/medical-data-science/#quantum-computing-readiness","title":"Quantum Computing Readiness","text":"<p>Early support for quantum algorithms applicable to drug discovery and genomics:</p> <pre><code>// Import quantum computing module\nimport medi.quantum;\n\n// Define quantum circuit for molecular simulation\ncircuit = medi.quantum.create_circuit(\n  algorithm: \"vqe\",\n  molecule: \"aspirin\",\n  backend: \"qiskit\"\n);\n\n// Run simulation\nresults = circuit.run(\n  shots: 1000,\n  optimization: \"cobyla\"\n);\n\n// Analyze energy levels\nbinding_energy = results.get_binding_energy();\n</code></pre>"},{"location":"key-features/medical-data-science/#learn-more","title":"Learn More","text":"<ul> <li>AI Model Reference</li> <li>Statistical Methods</li> <li>Visualization Gallery</li> <li>Federated Learning Guide</li> </ul>"},{"location":"key-features/nested-expressions/","title":"Nested Expressions &amp; Medical Operators","text":"<p>MediLang now supports complex nested expressions and medical-specific operators, making it easier to write and read healthcare-related calculations.</p>"},{"location":"key-features/nested-expressions/#key-features","title":"Key Features","text":""},{"location":"key-features/nested-expressions/#nested-expressions","title":"Nested Expressions","text":"<p>Write complex calculations with proper operator precedence:</p> <pre><code>// Calculate BMI with nested expressions\nlet bmi = weight / (height * height);\n\n// Complex medical calculation with proper operator precedence\nlet dosage = (weight * 2.5) + (age * 0.5) - (creatinine_clearance * 0.2);\n</code></pre>"},{"location":"key-features/nested-expressions/#medical-specific-operators","title":"Medical-Specific Operators","text":""},{"location":"key-features/nested-expressions/#the-of-operator","title":"The <code>of</code> Operator","text":"<p>Represents a relationship where one quantity is part of another:</p> <pre><code>// 2 tablets of 500mg each\nlet total_dose = 2 of 500mg;\n\n// 3 vials of 1000 units each\nlet total_units = 3 of 1000units;\n</code></pre>"},{"location":"key-features/nested-expressions/#the-per-operator","title":"The <code>per</code> Operator","text":"<p>Represents rates and frequencies:</p> <pre><code>// Administer 10mg per kg per day\nlet daily_dose = 10mg per kg per day;\n\n// Infusion rate in mL per hour\nlet infusion_rate = 1000mL per 8hr;\n</code></pre>"},{"location":"key-features/nested-expressions/#operator-precedence","title":"Operator Precedence","text":"<p>MediLang defines the following operator precedence (from highest to lowest):</p> <ol> <li><code>of</code></li> <li><code>*</code>, <code>/</code>, <code>per</code></li> <li><code>+</code>, <code>-</code></li> <li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li><code>==</code>, <code>!=</code></li> <li><code>&amp;&amp;</code></li> <li><code>||</code></li> </ol>"},{"location":"key-features/nested-expressions/#examples","title":"Examples","text":""},{"location":"key-features/nested-expressions/#medication-dosage-calculation","title":"Medication Dosage Calculation","text":"<pre><code>// Calculate total daily dose based on weight\nlet weight_based_dose = 15mg per kg * patient_weight;\n\n// Calculate number of tablets needed\nlet tablets_needed = (total_dose / (2 of 500mg)).ceil();\n</code></pre>"},{"location":"key-features/nested-expressions/#iv-infusion-rate","title":"IV Infusion Rate","text":"<pre><code>// Calculate IV infusion rate\nlet total_volume = 1000mL;\nlet infusion_time = 8hr;\nlet drops_per_ml = 20;\n\nlet ml_per_hour = total_volume / infusion_time;\nlet drops_per_minute = (ml_per_hour * drops_per_ml) / 60min;\n</code></pre>"},{"location":"key-features/nested-expressions/#best-practices","title":"Best Practices","text":"<ol> <li>Use Parentheses for Clarity: Even when not strictly necessary, using parentheses can make complex expressions more readable.</li> <li>Break Down Complex Calculations: For very complex calculations, consider breaking them into multiple steps with descriptive variable names.</li> <li>Use Units Consistently: Always include units in your calculations to avoid errors.</li> <li>Test Edge Cases: Pay special attention to edge cases like zero or negative values in medical calculations.</li> </ol>"},{"location":"key-features/nested-expressions/#related-articles","title":"Related Articles","text":"<ul> <li>Getting Started with MediLang</li> <li>Medical Data Science Features</li> <li>Full Language Reference</li> </ul>"},{"location":"reference/","title":"Medi Language Reference","text":""},{"location":"reference/#overview","title":"Overview","text":"<p>Medi is a programming language purpose-built for healthcare, designed to transform medical analytics with unparalleled ease, speed, and security. With a beginner-friendly syntax inspired by Python and R, high performance rivaling Julia, Rust, and C++, and native support for healthcare standards like FHIR, HL7, and DICOM, Medi empowers clinicians, researchers, and developers to unlock insights from complex medical data.</p>"},{"location":"reference/#core-features","title":"Core Features","text":""},{"location":"reference/#healthcare-specific-features","title":"Healthcare-Specific Features","text":"<ul> <li>Native Healthcare Standards: Built-in support for FHIR, HL7, DICOM, and genomic formats (FASTQ, VCF).</li> <li>Privacy-Preserving Analytics: Federated learning and differential privacy for secure data science and AI.</li> <li>Real-Time IoT Processing: Optimized for wearables and ICU devices, enabling instant insights.</li> <li>Regulatory Automation: Automated compliance checks and reporting for HIPAA, GDPR, FDA, and EMA.</li> </ul>"},{"location":"reference/#language-features","title":"Language Features","text":"<ul> <li>Clinician-Friendly Syntax: Intuitive, Python/R-like syntax and a visual IDE for non-programmers.</li> <li>High Performance: Compiled to machine code via LLVM, with WebAssembly and RISC-V support for edge devices.</li> <li>Parallel Processing: Multi-threading (OpenMP) and distributed computing (MPI/Spark) for scalable analytics.</li> <li>GPU Support: CUDA/OpenCL integration for AI-driven diagnostics and imaging (e.g., MRI segmentation).</li> <li>Hybrid Memory Management: Lightweight garbage collection (like Go) for simplicity, with Rust-inspired manual control (<code>scope</code>) for low-latency IoT tasks.</li> </ul>"},{"location":"reference/#application-domains","title":"Application Domains","text":"<p>Medi supports a wide range of healthcare applications:</p> <ul> <li>Genomics and bioinformatics</li> <li>Clinical trials and research</li> <li>Epidemiology and public health</li> <li>Hospital operations and management</li> <li>Telemedicine and remote monitoring</li> <li>Medical imaging and diagnostics</li> <li>Pharmaceutical R&amp;D</li> <li>Mental health analytics</li> </ul>"},{"location":"reference/#syntax-examples","title":"Syntax Examples","text":"<pre><code># This is a placeholder for Medi code examples\n# Actual syntax documentation will be added as the language matures\n</code></pre>"},{"location":"reference/#standard-library","title":"Standard Library","text":"<p>The Medi standard library includes specialized modules for healthcare data processing, analytics, visualization, and security. More detailed documentation will be provided as these components are developed.</p>"},{"location":"reference/lexer/","title":"Lexer and Tokenization","text":"<p>This document describes the lexical analysis phase of the Medi programming language, including token types, numeric literals, and error handling.</p>"},{"location":"reference/lexer/#numeric-literals","title":"Numeric Literals","text":"<p>Medi supports the following numeric literal formats:</p>"},{"location":"reference/lexer/#integer-literals","title":"Integer Literals","text":"<ul> <li>Decimal integers: <code>42</code>, <code>-123</code>, <code>0</code></li> <li>Binary literals (prefix <code>0b</code>): <code>0b1010</code> (10 in decimal)</li> <li>Octal literals (prefix <code>0o</code>): <code>0o755</code> (493 in decimal)</li> <li>Hexadecimal literals (prefix <code>0x</code>): <code>0xFF</code> (255 in decimal)</li> </ul>"},{"location":"reference/lexer/#floating-point-literals","title":"Floating-Point Literals","text":"<ul> <li>Standard notation: <code>3.14159</code>, <code>-0.001</code></li> <li>Scientific notation: <code>6.022e23</code>, <code>1.6e-19</code></li> <li>With explicit positive exponent: <code>1.0e+10</code></li> </ul>"},{"location":"reference/lexer/#invalid-numeric-literals","title":"Invalid Numeric Literals","text":"<p>The following are examples of invalid numeric literals:</p> <ul> <li><code>123abc</code> (letters immediately following digits without a separator)</li> <li><code>1.2.3</code> (multiple decimal points)</li> <li><code>0x1.2p3</code> (hexadecimal floats not supported yet)</li> <li><code>1_000</code> (underscores in numbers not supported yet)</li> </ul>"},{"location":"reference/lexer/#performance-and-benchmarks","title":"Performance and Benchmarks","text":"<p>The Medi lexer provides three different implementations with different performance characteristics:</p>"},{"location":"reference/lexer/#lexer-types","title":"Lexer Types","text":"<ol> <li>OriginalLexer</li> <li>Simple, straightforward implementation</li> <li>Good for most use cases</li> <li> <p>Moderate memory usage</p> </li> <li> <p>StreamingLexer</p> </li> <li>Optimized for memory efficiency</li> <li>Processes input in a streaming fashion</li> <li>Lowest memory usage</li> <li> <p>Slightly faster than OriginalLexer for large files</p> </li> <li> <p>ChunkedLexer</p> </li> <li>Processes input in fixed-size chunks</li> <li>Good for very large files</li> <li>Higher latency but consistent memory usage</li> </ol>"},{"location":"reference/lexer/#benchmark-results","title":"Benchmark Results","text":"<p>Here are the benchmark results for processing a 1MB Medi source file:</p> Lexer Type Min (ms) Max (ms) Avg (ms) Memory (MB) OriginalLexer 151.48 160.80 155.33 25.0 StreamingLexer 138.79 147.91 143.35 5.0 ChunkedLexer 236.86 266.77 251.59 10.0"},{"location":"reference/lexer/#when-to-use-each-lexer","title":"When to Use Each Lexer","text":"<ul> <li>Use <code>StreamingLexer</code> for most cases, especially with large files</li> <li>Use <code>OriginalLexer</code> when you need the simplest implementation</li> <li>Use <code>ChunkedLexer</code> for processing extremely large files with limited memory</li> </ul>"},{"location":"reference/lexer/#error-handling","title":"Error Handling","text":"<p>The lexer provides detailed error messages for various syntax errors:</p>"},{"location":"reference/lexer/#invalid-numeric-literals_1","title":"Invalid Numeric Literals","text":"<p>When an invalid numeric literal is encountered, the lexer will generate an error message indicating the invalid token and its location:</p> <pre><code>Error: Invalid numeric literal: 123abc\n  --&gt; example.medi:5:10\n   |\n 5 | let x = 123abc;\n   |          ^^^^^^ Invalid numeric literal\n   |\n   = help: Numeric literals cannot be directly followed by letters\n</code></pre>"},{"location":"reference/lexer/#error-recovery","title":"Error Recovery","text":"<p>The lexer implements basic error recovery by: 1. Emitting an error token with a descriptive message 2. Continuing to tokenize the remaining input 3. Providing the line and column numbers for error location</p>"},{"location":"reference/lexer/#common-error-messages","title":"Common Error Messages","text":"<ul> <li><code>Invalid numeric literal: &lt;token&gt;</code> - When a number is followed by invalid characters</li> <li><code>Unterminated string literal</code> - When a string is not properly closed</li> <li><code>Unrecognized token: &lt;char&gt;</code> - When encountering an unexpected character</li> <li><code>Unterminated block comment</code> - When a block comment is not properly closed</li> </ul>"},{"location":"reference/lexer/#token-types","title":"Token Types","text":"<p>The lexer recognizes the following token categories:</p> <ul> <li>Keywords: Language reserved words like <code>let</code>, <code>fn</code>, <code>if</code>, etc.</li> <li>Identifiers: Variable and function names</li> <li>Literals: Numbers, strings, booleans, etc.</li> <li>Operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, etc.</li> <li>Delimiters: <code>(</code>, <code>)</code>, <code>{</code>, <code>}</code>, <code>,</code>, <code>;</code>, etc.</li> <li>Whitespace: Spaces, tabs, newlines</li> <li>Comments: Both line (<code>//</code>) and block (<code>/* */</code>) comments</li> </ul>"},{"location":"reference/lexer/#best-practices","title":"Best Practices","text":"<ol> <li>Always separate numbers from identifiers with whitespace</li> <li>Use consistent numeric literal formats throughout your code</li> <li>Pay attention to error messages for quick debugging</li> <li>Use comments to document non-obvious numeric literals</li> </ol>"},{"location":"roadmap/","title":"Medi Ecosystem &amp; Self-Hosting Roadmap","text":"<p>Last updated: May 11, 2025</p> <p>Medi is a programming language purpose-built for healthcare analytics, with the tagline \"Empowering Healthcare with Secure, Fast, and Clinician-Friendly Analytics.\" This roadmap merges our ecosystem vision and the self-hosting plan, inspired by Rust\u2019s journey to maturity.</p>"},{"location":"roadmap/#1-ecosystem-vision-phased-plan","title":"1. Ecosystem Vision &amp; Phased Plan","text":""},{"location":"roadmap/#phase-1-functional-compiler-in-rust-02-years","title":"Phase 1: Functional Compiler in Rust (0\u20132 Years)","text":"<ul> <li>Goal: Complete the Rust-written <code>medic</code> compiler with essential features, including Rust-like borrow checking for memory safety and concurrency.</li> <li>Tasks:</li> <li>Finish recursive descent parser for Medi\u2019s syntax (<code>fhir_query</code>, <code>federated</code>)</li> <li>Implement type checking for healthcare types (e.g., <code>FHIRPatient</code>)</li> <li>Add privacy/compliance checker (HIPAA/GDPR)</li> <li>Ensure LLVM codegen supports WebAssembly and RISC-V</li> <li>Milestone: Medi 0.1 release, compiling simple healthcare analytics scripts</li> </ul>"},{"location":"roadmap/#phase-2-syntax-ecosystem-stabilization-23-years","title":"Phase 2: Syntax &amp; Ecosystem Stabilization (2\u20133 Years)","text":"<ul> <li>Goal: Finalize Medi\u2019s syntax and core features, expand the ecosystem</li> <li>Tasks:</li> <li>Stabilize healthcare constructs (<code>fhir_query</code>, <code>regulate</code>, <code>predict_risk</code>)</li> <li>Define the standard library (<code>medi.data</code>, <code>medi.ai</code>, <code>medi.compliance</code>)</li> <li>Launch <code>medipack</code> (package manager) and <code>medipacks.io</code> registry</li> <li>Gather community feedback, refine language</li> <li>Milestone: Medi 0.5 release, stable language core, ecosystem growth</li> </ul>"},{"location":"roadmap/#phase-3-begin-self-hosting-transition-34-years","title":"Phase 3: Begin Self-Hosting Transition (3\u20134 Years)","text":"<ul> <li>Goal: Start rewriting the compiler in Medi, using Rust compiler to bootstrap</li> <li>Tasks:</li> <li>Identify a stable Medi subset for compiler dev</li> <li>Rewrite parser in Medi, port type checker and privacy checker</li> <li>Interface with LLVM backend via FFI</li> <li>Milestone: Medi 0.8 release, partially self-hosted compiler</li> </ul>"},{"location":"roadmap/#phase-4-complete-self-hosting-45-years","title":"Phase 4: Complete Self-Hosting (4\u20135 Years)","text":"<ul> <li>Goal: Fully rewrite <code>medic</code> in Medi, achieving self-hosting</li> <li>Tasks:</li> <li>Port all compiler components to Medi</li> <li>Optimize performance</li> <li>Bootstrap: use Rust <code>medic</code> to compile Medi <code>medic</code>, then self-compile</li> <li>Milestone: Medi 1.0 release, fully self-hosted</li> </ul>"},{"location":"roadmap/#phase-5-post-self-hosting-5-years","title":"Phase 5: Post-Self-Hosting (5+ Years)","text":"<ul> <li>Goal: Maintain and enhance the self-hosted compiler</li> <li>Tasks:</li> <li>Add new features to <code>medic</code> using Medi (e.g., federated learning optimizations)</li> <li>Leverage Medi\u2019s healthcare features to improve the compiler</li> </ul>"},{"location":"roadmap/#2-key-ecosystem-components-from-ecosystem_roadmapmd","title":"2. Key Ecosystem Components (from ECOSYSTEM_ROADMAP.md)","text":"<ul> <li>Parser: Healthcare-specific syntax, clinician-friendly errors, recursive descent (Rust \u2192 Medi)</li> <li>Compiler (<code>medic</code>): Privacy/compliance checking, LLVM backend, WebAssembly/RISC-V, self-hosting</li> <li>Package Manager (<code>medipack</code>): Healthcare registry, <code>Medi.toml</code>, visual IDE support</li> <li>Privacy/Compliance Checker: Compile-time enforcement of HIPAA/GDPR/FDA</li> <li>Type System: Healthcare types (<code>FHIRPatient</code>, <code>DICOMImage</code>), generics, traits</li> <li>Macro System: Declarative/procedural macros for healthcare tasks</li> <li>Runtime: Minimal, with privacy and compliance hooks</li> </ul>"},{"location":"roadmap/#3-lessons-from-rust","title":"3. Lessons from Rust","text":"<ul> <li>Iterative Development: Focus on a minimal, stable subset for self-hosting</li> <li>Community Involvement: Use GitHub Discussions, RFCs for stabilization</li> <li>Bootstrapping Strategy: Gradual transition (parser first, then compiler)</li> <li>Borrow Checking: Adopt Rust-like borrow checking for safety and concurrency in Medi, ensuring memory safety and preventing data races in healthcare analytics.</li> </ul>"},{"location":"roadmap/#4-how-to-contribute","title":"4. How to Contribute","text":"<p>Help us achieve self-hosting for Medi! Check out <code>CONTRIBUTING.md</code> for guidelines, and share your ideas on GitHub Discussions or X @MediLangHQ. * Feature complete standard library * Comprehensive documentation * Performance benchmarking</p>"},{"location":"roadmap/#milestone-7-production-release-month-24","title":"Milestone 7: Production Release (Month 24)","text":"<ul> <li>Stability improvements</li> <li>Enterprise deployment options</li> <li>Training materials and certifications</li> </ul>"},{"location":"roadmap/#milestone-8-ecosystem-growth-month-36","title":"Milestone 8: Ecosystem Growth (Month 36)","text":"<ul> <li>Plugin marketplace</li> <li>Integration partners</li> <li>Academic and industry adoption</li> </ul>"},{"location":"roadmap/#getting-involved","title":"Getting Involved","text":"<p>We welcome contributions to help accelerate this roadmap:</p> <ul> <li>Check our GitHub issues for tasks</li> <li>Join our community forum</li> <li>Follow our X/Twitter account for updates</li> <li>Reach out about pilot programs at research institutions</li> </ul> <p>See our Contributing Guide for more details.</p>"},{"location":"technical/architecture/","title":"Technical Architecture","text":"<p>Medi is built on a modern compiler infrastructure designed for healthcare-specific optimizations and features.</p>"},{"location":"technical/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<p>The Medi language architecture consists of several key components:</p> <ol> <li>Frontend: Parser, lexer, and abstract syntax tree (AST) generation</li> <li>Middle-end: Type system, semantic analysis, and healthcare-specific optimizations</li> <li>Backend: LLVM IR generation, optimization passes, and target code generation</li> <li>Runtime: Standard library, memory management, and execution environment</li> <li>IDE &amp; Tools: Development environment, debugger, and profiler</li> </ol>"},{"location":"technical/architecture/#compiler-infrastructure","title":"Compiler Infrastructure","text":"<p>Medi's compiler, named <code>medic</code> (inspired by how Rust uses <code>rustc</code>), leverages LLVM for code generation and optimization:</p> <ul> <li>Lexer &amp; Parser: Hybrid implementation combining the efficiency of Logos for tokenization with custom logic for healthcare-specific syntax and semantics</li> <li>Type System: Statically typed with type inference and healthcare data types</li> <li>Optimizations: Domain-specific optimizations for healthcare analytics</li> <li>Code Generation: </li> <li>x86-64, ARM, and RISC-V native code</li> <li>WebAssembly for edge devices and browser deployment</li> <li>CUDA/OpenCL for GPU acceleration</li> </ul>"},{"location":"technical/architecture/#runtime-system","title":"Runtime System","text":"<p>The Medi runtime provides key services for healthcare applications:</p> <ul> <li>Memory Management: Hybrid approach with:</li> <li>Low-pause garbage collection (like Go) for most operations</li> <li>Rust-inspired manual control (<code>scope</code>) for low-latency IoT tasks</li> <li>Concurrency: Built-in support for:</li> <li>Multi-threading (OpenMP-style)</li> <li>Asynchronous operations (async/await)</li> <li>Distributed computing (MPI/Spark integration)</li> <li>Healthcare I/O: Native parsers and generators for:</li> <li>FHIR, HL7, DICOM</li> <li>Genomic formats (FASTQ, VCF, BAM)</li> <li>Medical imaging (NIfTI, DICOM)</li> <li>Wearable data streams</li> </ul>"},{"location":"technical/architecture/#standard-library","title":"Standard Library","text":"<p>The standard library is organized into domain-specific modules:</p> <ul> <li>medi.data: FHIR, HL7, DICOM, VCF parsers and generators</li> <li>medi.privacy: Federated learning, differential privacy, encryption</li> <li>medi.iot: Real-time streaming and edge processing</li> <li>medi.stats: Statistical functions for trials, epidemiology, and biostatistics</li> <li>medi.viz: Interactive visualization and dashboarding</li> <li>medi.compliance: Regulatory frameworks and reporting</li> <li>medi.ai: Pre-trained models for diagnostics, predictions, and NLP</li> <li>medi.ops: Hospital operations optimization</li> </ul>"},{"location":"technical/architecture/#risc-v-integration","title":"RISC-V Integration","text":"<p>Medi has special optimizations for RISC-V architecture:</p> <ul> <li>Target Profiles:</li> <li>RV32IMAFDC for edge devices (wearables, portable diagnostics)</li> <li>RV64GCV for servers (with vector extensions)</li> <li>Custom Extensions: Support for healthcare-specific instructions:</li> <li>Genomic alignment and processing</li> <li>Encryption for privacy preservation</li> <li>Signal processing for medical imaging/time series</li> <li>Optimizations:</li> <li>Low-power operation for edge devices</li> <li>Vector processing for parallel analytics</li> <li>Custom intrinsics for healthcare operations</li> </ul>"},{"location":"technical/architecture/#security-and-privacy","title":"Security and Privacy","text":"<p>Security is a foundational concern in Medi's architecture:</p> <ul> <li>Memory Safety: Built-in protection against common vulnerabilities</li> <li>Encryption: Hardware-accelerated (where available) encryption for PHI</li> <li>Access Control: Fine-grained permissions system for data access</li> <li>Audit Trails: Automatic logging of sensitive operations</li> <li>Differential Privacy: Built-in mechanisms for privacy-preserving analytics</li> </ul>"},{"location":"technical/architecture/#ide-integration","title":"IDE Integration","text":"<p>The Medi Studio IDE provides:</p> <ul> <li>Visual Programming: Drag-and-drop interface for non-programmers</li> <li>Natural Language Interface: Query and analysis using plain English</li> <li>Code Completion: Healthcare-aware suggestions</li> <li>Compliance Checking: Real-time validation against regulatory standards</li> <li>Performance Profiling: Optimization recommendations for healthcare tasks</li> </ul>"},{"location":"technical/architecture/#deployment-options","title":"Deployment Options","text":"<p>Medi supports multiple deployment scenarios:</p> <ul> <li>Traditional Compilation: Native binaries for maximum performance</li> <li>Just-in-Time (JIT): Dynamic compilation for interactive development</li> <li>WebAssembly: Browser and edge deployment</li> <li>Container-based: Docker/Kubernetes packaging for cloud deployment</li> </ul>"},{"location":"technical/architecture/#future-extensibility","title":"Future Extensibility","text":"<p>The architecture is designed for extensibility in emerging healthcare domains:</p> <ul> <li>Quantum Computing: Interface with quantum libraries (Qiskit, Cirq)</li> <li>Neuromorphic Computing: Support for neuromorphic hardware for AI tasks</li> <li>Specialized Accelerators: Integration with healthcare-specific hardware accelerators</li> </ul>"},{"location":"technical/common-errors/","title":"Common Errors and Solutions","text":"<p>This page lists frequent issues seen in Medi code and how to resolve them, with examples of the annotated diagnostics you will see.</p>"},{"location":"technical/common-errors/#using-instead-of","title":"Using '=' instead of '=='","text":"<ul> <li>Symptom: assignment operator used where a comparison is intended.</li> <li>Solution: use <code>==</code> for equality comparison; keep <code>=</code> for assignment.</li> </ul> <p>Example diagnostic: <pre><code>error: Unexpected token: Equal\n --&gt; line N, col M\n  |\n N | if x = 3 { ... }\n  |      ^  help: If you meant to compare two values, use '=='\n</code></pre></p>"},{"location":"technical/common-errors/#unmatched-brackets","title":"Unmatched brackets","text":"<ul> <li>Symptom: <code>)</code>, <code>]</code>, or <code>}</code> appears without a matching opening bracket.</li> <li>Solution: add the corresponding opening bracket earlier in the line/block.</li> </ul> <pre><code>error: Unexpected token: RightBracket\n --&gt; line N, col M\n  |\n N | list]\n  |     ^  help: Did you forget a matching '[' earlier?\n</code></pre>"},{"location":"technical/common-errors/#stray-or-unrecognized-text","title":"Stray or unrecognized text","text":"<ul> <li>Symptom: Lexer error token appears (e.g., invalid symbol or garbled text).</li> <li>Solution: remove the text or replace it with a valid keyword/symbol.</li> </ul> <pre><code>error: Unrecognized token: '??='\n --&gt; line N, col M\n  |\n N | a ??= b\n  |   ~~  help: This text is not valid Medi syntax. Remove it or replace with a valid symbol/keyword.\n</code></pre>"},{"location":"technical/common-errors/#misusing-clinical-operators-eg-per-of","title":"Misusing clinical operators (e.g., 'per', 'of')","text":"<ul> <li>Symptom: Operator is in the wrong context or missing units.</li> <li>Solution: ensure expressions follow domain usage, e.g., <code>mg per kg</code>, <code>2 of doses</code>.</li> </ul> <pre><code>warning: Value did not meet expected form\n --&gt; line N, col M\n  |\n N | dose per\n  |      ^  help: 'per' expresses rates (e.g., 'mg per kg'). Ensure units are valid\n</code></pre>"},{"location":"technical/common-errors/#incomplete-input","title":"Incomplete input","text":"<ul> <li>Symptom: File ends while a statement/block is unfinished.</li> <li>Solution: complete the statement or close the block.</li> </ul> <pre><code>error: Incomplete input\n --&gt; line 1, col 1\n  |\n  |  help: The parser expected more input. Did the file end unexpectedly?\n</code></pre>"},{"location":"technical/common-errors/#tips","title":"Tips","text":"<ul> <li>Caret (^) highlights single-character issues; tildes (~) highlight multi-character spans.</li> <li>Non-fatal parse errors surfaced during recovery are shown as warnings.</li> <li>Most diagnostics include a short <code>help:</code> hint with a suggested fix.</li> </ul>"},{"location":"technical/diagnostics-snippets/","title":"Interpreting Annotated Diagnostics","text":"<p>Medi shows clinician\u2011friendly diagnostic messages with an annotated snippet of your source code to help you quickly understand and fix issues.</p> <p>Each diagnostic includes:</p> <ul> <li>Severity and message.</li> <li>Location (line and column).</li> <li>The source line with a gutter.</li> <li>An underline marking the exact span.</li> <li>Optional help guidance.</li> </ul>"},{"location":"technical/diagnostics-snippets/#example","title":"Example","text":"<pre><code>error: Unexpected token: RightBracket\n --&gt; line 4, col 10\n  |\n 4 | let meds = list]\n  |           ^  help: Did you forget a matching '[' earlier?\n</code></pre> <ul> <li>\"error\" is the severity. Others include \"warning\", \"info\", and \"note\".</li> <li>The caret (^) or tildes (~) underline the offending span.</li> <li>Single\u2011character spans use a caret.</li> <li>Multi\u2011character spans use tildes.</li> <li>A contextual \"help\" hint may appear after the underline.</li> </ul>"},{"location":"technical/diagnostics-snippets/#reading-the-underline","title":"Reading the underline","text":"<ul> <li>Caret under the first column: the issue is at the start of the line.</li> <li>Caret at the last column: the issue is at the end of the line.</li> <li>Multiple tildes: the entire operator/identifier is highlighted (e.g., <code>==</code>).</li> </ul>"},{"location":"technical/diagnostics-snippets/#multiline-files","title":"Multi\u2011line files","text":"<p>If your code spans multiple lines, the snippet will show the specific line and column for the diagnostic. Only the relevant line is shown to keep focus clear.</p>"},{"location":"technical/diagnostics-snippets/#informational-messages","title":"Informational messages","text":"<p>The \"info\" severity communicates non\u2011actionable guidance (e.g., tips or context) and uses the same snippet format so you can locate the referenced code quickly.</p>"},{"location":"technical/diagnostics-snippets/#common-guidance","title":"Common guidance","text":"<p>Medi offers domain\u2011aware help messages, for example:</p> <ul> <li>Confusing <code>=</code> with <code>==</code> in comparisons.</li> <li>Unmatched brackets <code>)</code>, <code>]</code>, or <code>}</code>.</li> <li>Misplaced clinical operators such as <code>per</code> or <code>of</code>.</li> </ul> <p>These hints appear as <code>help: ...</code> after the underline.</p>"},{"location":"technical/file-structure/","title":"Medi File Structure and Organization","text":"<p>Medi follows a Rust-inspired approach to code organization, providing clean structure and explicit visibility for healthcare applications.</p>"},{"location":"technical/file-structure/#file-extensions","title":"File Extensions","text":"<p>Medi source code files use the <code>.medi</code> extension:</p> <pre><code>patient_analysis.medi\ndata_pipeline.medi\nclinical_trial.medi\n</code></pre>"},{"location":"technical/file-structure/#module-system","title":"Module System","text":""},{"location":"technical/file-structure/#single-file-modules","title":"Single File Modules","text":"<p>Each <code>.medi</code> file is a module, containing related functionality. By default, all items (functions, types, etc.) are private to the module unless explicitly marked public:</p> <pre><code>// my_module.medi\npub fn analyze_vitals(heart_rate: Integer, blood_pressure: Tuple&lt;Integer, Integer&gt;) {\n    // This function is accessible from other modules\n    // because it's marked with 'pub'\n    if (is_tachycardia(heart_rate)) {\n        alert(\"Tachycardia detected\");\n    }\n}\n\nfn is_tachycardia(heart_rate: Integer) -&gt; Boolean {\n    // This helper function is private to this module\n    // since it lacks the 'pub' keyword\n    return heart_rate &gt; 100;\n}\n</code></pre>"},{"location":"technical/file-structure/#importing-modules","title":"Importing Modules","text":"<p>You can import other modules with the <code>use</code> keyword:</p> <pre><code>// main.medi\nuse vitals;\nuse patient::records;\n\npub fn main() {\n    let patient = records::load(\"P-12345\");\n    vitals::analyze_vitals(patient.heart_rate, patient.blood_pressure);\n}\n</code></pre>"},{"location":"technical/file-structure/#directory-based-modules","title":"Directory-Based Modules","text":"<p>For larger projects, you can organize code in directories:</p> <pre><code>project/\n\u251c\u2500\u2500 main.medi         # Main entry point\n\u251c\u2500\u2500 vitals/\n\u2502   \u251c\u2500\u2500 mod.medi      # Makes directory a module and re-exports items\n\u2502   \u251c\u2500\u2500 analysis.medi # Analysis functions\n\u2502   \u2514\u2500\u2500 alerts.medi   # Alert management\n\u2514\u2500\u2500 patient/\n    \u251c\u2500\u2500 mod.medi\n    \u251c\u2500\u2500 records.medi  # Patient record handling\n    \u2514\u2500\u2500 search.medi   # Patient search functionality\n</code></pre> <p>The <code>mod.medi</code> file declares and re-exports submodules:</p> <pre><code>// vitals/mod.medi\npub mod analysis;\npub mod alerts;\n\n// Re-export commonly used functions for convenience\npub use analysis::analyze_vitals;\n</code></pre>"},{"location":"technical/file-structure/#visibility-and-encapsulation","title":"Visibility and Encapsulation","text":"<p>Medi's visibility system helps enforce good architecture and data privacy:</p> <ul> <li><code>pub</code>: Item is visible outside the module</li> <li>Default (no modifier): Item is private to the module</li> <li><code>pub(crate)</code>: Item is visible within the current crate only</li> <li><code>pub(super)</code>: Item is visible to the parent module only</li> </ul> <p>This is particularly important for healthcare applications where encapsulation helps protect sensitive data access patterns.</p>"},{"location":"technical/file-structure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Group by domain concept: Organize modules around healthcare domain concepts (patients, vitals, medications) rather than technical layers.</p> </li> <li> <p>Privacy by default: Keep implementation details private and only expose necessary APIs.</p> </li> <li> <p>Re-export for convenience: Use <code>mod.medi</code> files to re-export common items for easier imports.</p> </li> <li> <p>Consistent naming: Use snake_case for filenames and functions, PascalCase for types.</p> </li> <li> <p>Documentation: Add documentation comments with <code>///</code> before public items to generate automatic documentation.</p> </li> </ol> <p>By following these Rust-inspired practices, Medi code remains maintainable and secure as projects grow in size and complexity.</p>"}]}